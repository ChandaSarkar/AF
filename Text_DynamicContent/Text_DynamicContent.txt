define(['Treestructure'], function(TreeStructure) {
    var TS = new TreeStructure();
    appGlobals.globals.pubsubQueue.subscribe("generateTreeStructure", TS.callGenerateTreeStructure);
    appGlobals.globals.pubsubQueue.subscribe("reloadTreeStructureContent", TS.reloadContent);
    appGlobals.globals.pubsubQueue.subscribe("folderLogoClick", TS.callFolderLogoClick);
    appGlobals.globals.pubsubQueue.subscribe("hideTree", TS.hideTree);
    appGlobals.globals.pubsubQueue.subscribe("setClassName", TS.setClassName);

    // Declaring an object that contains all methods for dynamic content generation
    var DynamicContent = function() {
        var self = this;
        var isOnlySavepage = 0;
        var allAppPages = '';
        var isSmartForm = 0;
        var pageDetailsInfo = '';
        var formName;
        var originalCategoryName = '';
        var atOnce = true;
        var formEid, isSmartFormFlag, formElementLength;
        var isFormPresent = false;
        var isButtonTypePresent = true;
        this.recordCount;
        this.previousRequestComplete = true;
        this.bodyHeight;
        this.creatingPage = false;

        // This object contains list of all constants used in this js file
        var constants = {
            VERTICAL_ELLIPSES: appGlobals.globals.imgPath + 'overflow_dots.png',
            VERTICAL_ELLIPSES_HOVER: appGlobals.globals.imgPath + 'overflow_dots_hover.png',
            FORM_ICON: appGlobals.globals.imgPath + 'form_icon.png',
            TABLE_IMAGE: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'table.png',
            TABLE_IMAGE_2X: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'table@2x.png',
            TABLE_IMAGE_HEADER: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'table_header.png',
            TABLE_IMAGE_HEADER_2X: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'table_header@2x.png',
            CANVAS_IMAGE: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'canvas.png',
            CANVAS_IMAGE_2X: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'canvas@2x.png',
            CANVAS_IMAGE_HEADER: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'canvas_header.png',
            CANVAS_IMAGE_HEADER_2X: appGlobals.globals.imgPath + appGlobals.globals.dyncontentPath + 'canvas_header@2x.png',
            PREVIEW_IMAGE: appGlobals.globals.imgPath + "samplePdfIcon.jpg"
        };

        // This method will determine current order of the component
        var getOrder = function(componentId) {
            var order;
            var isTableExist = $(".body .dyn-table-layout").length > 0 ? true : false;

            $(".body .dyn-table td .temp-component").each(function(index) {
                if (componentId === $(this).attr('id')) {
                    order = index;
                }
            });

            if (isTableExist === true) {
                ++order;
            }

            return order;
        };
        // This method will check public/private
        this.checkPublicPrivate = function(pageId, node) {
            var listTableTd = $("#list-table tr#" + pageId + " td");
            if (node.publicLobby) {
                listTableTd.find(".private-icon.retina-icon").hide();
                listTableTd.find(".home-icon.retina-icon").show();
                listTableTd.find(".btn-group ul li .private").closest("li").remove();
            } else if (node.privateLobby) {
                listTableTd.find(".home-icon.retina-icon").hide();
                listTableTd.find(".private-icon.retina-icon").show();
                listTableTd.find(".btn-group ul li .public").closest("li").remove();
            }
        };
        // This method will generate HTML for page list
        this.generateHTML = function(response) {
            var nextPage = $(".main-list-table#list-table").attr("data-page");

            if (response) {
                self.jsonResponse = response;
                self.recordCount = response.length;
            } else {
                self.recordCount = self.jsonResponse.length;
            }
            self.previousRequestComplete = true;
            if (!parseInt(nextPage)) {
                $(".main-list-table#list-table tbody").html('');
            }
            if (!parseInt(nextPage) && response.length < 1) {
                $('.main-list-table#list-table tbody').html('<tr><td colspan="4" class="no-records">&nbsp;&nbsp;No page available.</td></tr>');
                $('.ajax-status-icons').hide();
                return false;
            }
            var pageListTemplate = $("#page-list").html();
            Mustache.tags = ['{|', '|}'];
            var respLength = response.length;
            for (var index = 0; index < respLength; ++index) {
                var node = response[index];
                var newTemplate = pageListTemplate;
                var pageId = node.id;
                $("#" + pageId).data("property", node);
                // Check for page category
                $('.main-list-table#list-table tbody').append(Mustache.render(newTemplate, node));

                // This POC will add object to each page node which will be further used
                $('.main-list-table#list-table').find(" #" + node.id).data("property", node);
                self.checkPublicPrivate(pageId, node);

                if (appGlobals.globals.isRetina) {
                    var element = "#dashboard-main-content-container #list-table .home-icon img";
                    appGlobals.globals.updateRetinaImageName(element);
                }
            }

            if (!response.length && nextPage === "0") {
                $(".main-list-table#list-table tbody").html('<tr><td colspan="3" class="no-records">&nbsp;&nbsp;No page available.</td></tr>');
            }
        };

        // This function will validate padding, spacing, insets
        var validatePaddingSpacing = function(value) {
            if (value <= 50 && value >= 0) {
                return 1;
            }
            return 0;
        };

        var validateEachComponent = function(component, errorComponent) {
            var result = 0;
            var componentValue = $(component).val();
            result = validatePaddingSpacing(componentValue);
            if (!result) {
                $(errorComponent).css("color", "#e34948");
                $(errorComponent).show();

                $(component).css("border-color", "#b3d4fc");
                $(component).val('');
                $(component).focus();
                return 0;
            } else {
                $(errorComponent).css("color", "#999999");
                $(errorComponent).hide();

                $(component).css("border-color", "#ccc");
                return 1;
            }
        };

        // This function will validate page component
        var validateComponent = function() {
            var componentType = $("#hidden-component-type").val();
            componentType = componentType.toLowerCase();
            var result = 0;

            var componentMapping = {
                paragraph: {
                    componentList: ['.paragraph-type .pad-left', '.paragraph-type .pad-right'],
                    errorComponent: '.paragraph-type .padding-error'
                },
                carousel: {
                    componentList: ['.carousel-type .left', '.carousel-type .right', '.carousel-type .top', '.carousel-type .bottom'],
                    errorComponent: '.carousel-type .insets-error'
                }
            };

            if (componentMapping[componentType]) {
                var componentList = componentMapping[componentType].componentList;
                var errorComponent = componentMapping[componentType].errorComponent;
                var compLength = componentList.length;

                for (var index = 0; index < compLength; ++index) {
                    result = validateEachComponent($(componentList[index]), $(errorComponent));
                    if (!result) {
                        return 0;
                    }
                }
            }
            return 1;
        };

        // Reset page canvas height
        this.resetPageCanvasHeight = function(data) {
            var bodyHeight = $("#layout .body").height();
            var navBarHeight = $("#layout .layout-nav").height();

            if (data === "show") {
                $("#layout .layout-nav").show();
                if ($('#layout .body').height() === self.bodyHeight) {
                    $("#layout .body").height(bodyHeight - navBarHeight - 4);
                }
            } else if (data === "hide") {
                $("#layout .layout-nav").hide();
                if ($('#layout .body').height() !== self.bodyHeight) {
                    $("#layout .body").height(self.bodyHeight);
                }
            }
        };

        // This method will reset column in layout pane
        this.resetColumn = function() {
            // Remove existing vertical columns
            $("#layout .v-line").remove();

            if ($(".body .dyn-table-container").length === 0) {
                var tag = "<div class='v-line'></div>";
                var columnCount = parseInt($("#column-count").val());

                for (var index = 1; index < columnCount; ++index) {
                    $(tag).insertBefore("#layout .body");
                }

                // Now setting its height, left and bottom
                var height = $("#layout .body").height();
                $(".v-line").css("height", height + "px");

                if (columnCount > 1) {
                    var left = $("#layout .body").width() / columnCount;
                    $(".v-line").each(function(index) {
                        var value = (index + 1) * left;
                        $(this).css("left", value + 58 + "px");
                    });
                }
            }
        };

        var generateCategoriesList = function(response) {
            var categoryDataText = [];
            $(response).each(function(key, value) {
                if (value.text !== "") {
                    categoryDataText.push(value.text);
                }
            });

            if ($("#page-category-text-box").hasClass('ui-autocomplete-input') === true) {
                // Reloading auto-complete data
                $("#page-category-text-box").autocomplete("option", {source: categoryDataText});
            } else {
                // Initializing auto-complete
                $("#page-category-text-box").autocomplete({
                    source: categoryDataText,
                    minLength: 0,
                    scroll: true
                }).focus(function() {
                    $(this).autocomplete("search");
                });
            }
        };

        // This function will get categories
        var getApplicationCategories = function(response) {
            if (response) {
                appGlobals.globals.categories = response;
                generateCategoriesList(response);
            } else {
                if (appGlobals.globals.categories === "") {
                    // Fetching list of categories associated to specific application
                    var appId = $("#application-name").attr("data-id");
                    var obj = {};
                    obj.type = "GET";
                    obj.async = true;
                    obj.url = appGlobals.globals.appbuilderURL + "get-app-templates";
                    obj.data = {"appId": appId, "type": "categories"};
                    appGlobals.globals.ajaxCalling(obj, getApplicationCategories);
                } else {
                    generateCategoriesList(appGlobals.globals.categories);
                }
            }
        };

        // This method shows carousal pages.
        var showCarousalPages = function(response) {
            var carPagesResponseLength = response.length;
            if (carPagesResponseLength) {
                for (var i = 0; i < carPagesResponseLength; i++) {
                    var pageName = $(".carousel-type .dropdown-page-select li[value='" + response[i].page + "']").text();
                    $("#available-pages").append("<span data-id='" + response[i].page + "' value ='" + response[i].order + "' name ='" + response[i].id + "'>" + pageName + "<i class='icon-remove'></i></span>");
                }
            }
        };

        // This method will remove existing smart form
        var removeExistingSmartForm = function() {
            var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'delete-entity'};
            var newData = {"type": "page-form"};
            var id = $('#hidden-page-id').attr("value");

            newData.entityId = id;
            obj.data = newData;
            appGlobals.globals.ajaxCalling(obj);

            $(".smart-form-component.form-element").each(function() {
                if ($(this).parents("table").hasClass("dyn-table") === true) {
                    $(this).closest('tr').remove();
                } else {
                    var parentElement = $(this).parents("td");
                    $(parentElement).html('<li class="temp-component"></li>');
                    $(parentElement).addClass('empty-container');
                }
            });

            // Operations to perform if outer layout table is blank
            if ($(".body .dyn-table").find('li').length === 0) {
                $("#layout .body .dyn-table").html('<tbody><tr><td class="empty-container"><li class="temp-component"></li></td></tr></tbody>');

                // Setting layout table's minimum height
                var bodyHeight = $(".body").height();
                var tableHeight = $(".table-container").height();
                var minHeight = bodyHeight - tableHeight;
                $(".dyn-table").css("height", minHeight - 15 + "px");
            }

            // Attach event
            appGlobals.globals.pubsubQueue.publish("attachDroppableEvent");

            // Sorting event
            appGlobals.globals.pubsubQueue.publish("attachEvent");

            // Update order of layout elements
            self.updateAllComponentOrder();
        };

        // This is a generic method that will get list of properties
        var getComponentPropertyList = function(propertyList, componentObject) {
            $(propertyList.properties).each(function(key, data) {
                if ($.inArray(data.name, componentObject.propertyList) > -1) {

                    if (data.name === 'TextColor') {
                        var color = appGlobals.globals.generateColorCode(componentObject.elementArray[data.name]);
                        propertyList.properties[key].value = color;
                    } else {
                        propertyList.properties[key].value = componentObject.elementArray[data.name];
                    }

                    componentObject.propertyFound.push(data.name);
                }
            });

            return {'propertyList': propertyList, 'componentObject': componentObject};
        };

        // This method will set properties of page components
        var setComponentProperty = function(ComponentObj, dataObj, property, value) {
            if ($.inArray('property', ComponentObj.propertyFound) === -1) {
                dataObj.properties.push({"name": property, "value": value});
            }
            return dataObj;
        };

        // This method will fetch properties of paraghaph component
        var fetchParagraphProperties = function(componentId, componentInitialId, objData) {
            var paragraphElement = $('.paragraph-type');
            var fontSize = $(paragraphElement).find(".font-size option:selected").text();
            var textColors = $(paragraphElement).find('.well .demo i').css('background-color');
            var fontFace = $(paragraphElement).find('.font-face .font-face-dropdown option:selected').val();
            var paddingLeft = $.trim($(paragraphElement).find(".pad-left").val());
            var paddingRight = $.trim($(paragraphElement).find(".pad-right").val());
            var padding = '0,' + paddingRight + ',0,' + paddingLeft;

            // As the element already exist, order will be different
            var order = getOrder(componentId);

            objData.order = order;
            objData.type = componentInitialId;
            objData.text = $.trim($(paragraphElement).find(".paragraph-name").val());

            var textAlign = $(paragraphElement).find(".para-align .active").val();

            if (fontFace === "Device Default") {
                fontFace = "";
            }

            var paragraphObject = {
                propertyList: ['FontFace', 'FontSize', 'Padding', 'TextColor', 'TextAlignment'],
                elementArray: {
                    FontFace: fontFace,
                    FontSize: fontSize,
                    Padding: padding,
                    TextColor: textColors,
                    TextAlignment: textAlign
                },
                propertyFound: []
            };

            var paraghaphData = getComponentPropertyList(objData, paragraphObject);
            objData = paraghaphData.propertyList;
            paragraphObject = paraghaphData.componentObject;

            objData = setComponentProperty(paragraphObject, objData, 'FontFace', fontFace);
            objData = setComponentProperty(paragraphObject, objData, 'FontSize', fontSize);
            objData = setComponentProperty(paragraphObject, objData, 'TextAlignment', textAlign);

            return objData;
        };

        // This method will fetch properties of phone number component
        var fetchPhoneNumberProperties = function(componentId, componentInitialId, objData) {
            var phoneComponent = $(".phonenumber-type");
            var text = $.trim($(phoneComponent).find(".phone-name").val());
            var phoneNumber = $.trim($(phoneComponent).find(".phone-number").val());
            var fontSize = $(phoneComponent).find(".font-size option:selected").text();
            var phoneTextColors = $(phoneComponent).find('.well .demo i').css('background-color');
            var phoneFontFace = $(phoneComponent).find('.font-face .font-face-dropdown option:selected').val();

            // As the element already exist, order will be different
            var order = getOrder(componentId);

            objData.order = order;
            objData.type = componentInitialId;
            objData.text = text;
            objData.phoneNumber = phoneNumber;

            if (phoneFontFace === "Device Default") {
                phoneFontFace = "";
            }

            var phoneNumberObject = {
                propertyList: ['FontFace', 'FontSize', 'TextColor'],
                elementArray: {
                    FontFace: phoneFontFace,
                    FontSize: fontSize,
                    TextColor: phoneTextColors
                },
                propertyFound: []
            };

            var phoneNumberData = getComponentPropertyList(objData, phoneNumberObject);
            objData = phoneNumberData.propertyList;
            phoneNumberObject = phoneNumberData.componentObject;

            objData = setComponentProperty(phoneNumberObject, objData, 'FontFace', phoneFontFace);
            objData = setComponentProperty(phoneNumberObject, objData, 'FontSize', fontSize);

            return objData;
        };

        // This method will set button type argument values
        var setButtonTypeArgument = function(objData) {
            var buttonType = $('.button-type #select-button-type option:selected').attr("type");

            switch (buttonType) {
                case "1":
                    objData.pageLink = $(".category-type select").val();
                    break;

                case "73":
                    $(".top-content-checkboxes").show();
                    $(".layer-select-option").show();
                    var layers = [];
                    objData.arg2 = 0;
                    objData.arg3 = 0;
                    $("#layer-dropdown ul li label input").each(function() {
                        if ($(this).prop('checked')) {
                            var id = $(this).attr("id");
                            layers.push(id);
                        }
                    });
                    objData.arg1 = layers.toString();
                    var total = $('#layer-dropdown .drop-down-body ul li input').length;
                    var checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;
                    if (total === checked || checked === 0) {
                        objData.arg1 = "";
                    }

                    if ($(".top-level-content").prop("checked")) {
                        objData.arg3 = 1;
                    }
                    if ($(".last-visited-layer").prop("checked")) {
                        objData.arg2 = 1;
                    }
                    break;

                case "84":
                    var buildings = [];
                    $("#map-dropdown ul li label input").each(function() {
                        if ($(this).prop('checked')) {
                            var id = $(this).attr("id");
                            buildings.push(id);
                        }
                    });
                    objData.arg1 = buildings.toString();
                    break;

                case "36":
                    var appVersion = $("#application-name .selected-name").attr("value");
                    if (appVersion >= 4.1) {
                        objData.arg1 = $(".content-category-1").val();
                        objData.arg2 = $(".content-category-2").val();
                    } else if (appVersion <= 4.0) {
                        objData.arg1 = $(".content-category-2").val();
                    }
                    break;

                default:
                    objData.arg1 = $(".content-category-1").val();
                    break;
            }

            return objData;
        };

        // This method will fetch properties of button component
        var fetchButtonProperties = function(componentId, componentInitialId, objData) {
            var buttonComponent = $('.button-type');
            var title = $.trim($(buttonComponent).find(".button-name").val());
            var buttonId = $(buttonComponent).find('#select-button-type option:selected').val();
            var fontSize = $(buttonComponent).find(".font-size option:selected").val();
            var textColors = $(buttonComponent).find('.well .demo i').css('background-color');
            var btnalignval = $(buttonComponent).find(".btn-align .active").val();
            var textalignval = $(buttonComponent).find(".text-align .active").val();
            var fontFace = $(buttonComponent).find('.font-face .font-face-dropdown option:selected').val();

            // As the element already exists, order will be different
            var order = getOrder(componentId);

            objData.order = order;
            objData.type = componentInitialId;
            objData.title = title;

            if (buttonId) {
                objData.byttonType = buttonId;
            } else {
                return false;
            }

            objData = setButtonTypeArgument(objData);

            objData.precache = $(buttonComponent).find("#btnPreload:checkbox").prop('checked');
            objData.imageId = $(buttonComponent).find("#btn-img-display-1 img").attr("data-id");
            objData.selImageId = $(buttonComponent).find("#btn-img-display-2 img").attr("data-id");
            if (!objData.imageId) {
                objData.imageId = "";
            }
            if (!objData.selImageId) {
                objData.selImageId = "";
            }

            var btnalignvalcheck = 0;
            var btntextalignvalcheck = 0;
            var btnFontSize = 0;
            var btnFontFace = 0;

            $(objData.properties).each(function(key, data) {

                switch (data.name) {
                    case "FontFace":
                        if (fontFace === "Device Default") {
                            fontFace = "";
                        }
                        objData.properties[key].value = fontFace;
                        btnFontFace = 1;
                        break;

                    case "FontSize":
                        objData.properties[key].value = fontSize;
                        btnFontSize = 1;
                        break;

                    case "TextColor":
                        var color = appGlobals.globals.generateColorCode(textColors);
                        objData.properties[key].value = color;
                        break;

                    case "Alignment":
                        objData.properties[key].value = btnalignval;
                        btnalignvalcheck = 1;
                        break;

                    case "TextAlignment":
                        objData.properties[key].value = textalignval;
                        btntextalignvalcheck = 1;
                        break;

                    default:
                        break;

                }
            });

            if (!btnFontFace) {
                objData.properties.push({"name": "FontFace", "value": fontFace});
            }
            if (!btnFontSize) {
                objData.properties.push({"name": "FontSize", "value": fontSize});
            }
            if (!btnalignvalcheck) {
                objData.properties.push({"name": "Alignment", "value": btnalignval});
            }
            if (!btntextalignvalcheck) {
                objData.properties.push({"name": "TextAlignment", "value": textalignval});
            }

            return objData;
        };

        // This method will fetch properties of image component
        var fetchImageProperties = function(componentId, componentInitialId, objData) {
            var imageComponent = $(".image-type");
            var text = $.trim($(imageComponent).find(".image-name").val());
            var alignVal = $(imageComponent).find(".img-align .active").val();

            // As the element already exists, order will be different
            var order = getOrder(componentId);

            objData.order = order;
            objData.type = componentInitialId;
            objData.text = text;
            objData.precache = $(imageComponent).find("#imgPreload:checkbox").prop('checked');
            objData.imageId = $(imageComponent).find(".img-display img").attr("data-id");
            if (!objData.imageId) {
                objData.imageId = "";
            }

            var imageObject = {
                propertyList: ['Alignment'],
                elementArray: {
                    Alignment: alignVal
                },
                propertyFound: []
            };

            var imageData = getComponentPropertyList(objData, imageObject);
            objData = imageData.propertyList;
            imageObject = imageData.componentObject;

            objData = setComponentProperty(imageObject, objData, 'Alignment', alignVal);

            return objData;
        };

        // This method will fetch properties of carousel component
        var fetchCarouselProperties = function(componentId, componentInitialId, objData) {
            var carouselComponent = $(".carousel-type");
            var carouselTitle = $.trim($(carouselComponent).find(".carousel-name").val());
            var timeperiod = $.trim($(carouselComponent).find(".time-period input").val());
            var width = $.trim($(carouselComponent).find(".width input").val());
            var height = $.trim($(carouselComponent).find(".height input").val());
            var effect = $(carouselComponent).find('.effect select').find(":selected").val();
            var paddingTop = $.trim($(carouselComponent).find(".inset .top").val());
            var carouselPaddingLeft = $.trim($(carouselComponent).find(".inset .left").val());
            var paddingBottom = $.trim($(carouselComponent).find(".inset .bottom").val());
            var carouselPaddingRight = $.trim($(carouselComponent).find(".inset .right").val());
            var padding = paddingTop + ',' + carouselPaddingLeft + ',' + paddingBottom + ',' + carouselPaddingRight;

            // As the element already exists, order will be different
            var order = getOrder(componentId);

            objData.order = order;
            objData.type = componentInitialId;
            objData.title = carouselTitle;

            var carouselObject = {
                propertyList: ['Insets', 'TimePeriod', 'Width', 'Height', 'Effect'],
                elementArray: {
                    Insets: padding,
                    TimePeriod: timeperiod,
                    Width: width,
                    Height: height,
                    Effect: effect
                },
                propertyFound: []
            };

            var carouselData = getComponentPropertyList(objData, carouselObject);
            objData = carouselData.propertyList;
            carouselObject = carouselData.componentObject;

            objData = setComponentProperty(carouselObject, objData, 'Height', height);
            objData = setComponentProperty(carouselObject, objData, 'Effect', effect);

            return objData;
        };

        // This method will fetch properties of smart form component
        var fetchSmartFormProperties = function(componentId, componentInitialId, objData) {
            var message = $(".smartform-type .dyn-success-msg").val();
            var error = $(".smartform-type .dyn-failed-msg").val();
            var text = "Smart Form";
            text = $(".smartform-type #select-dyn-smart-form option:selected").text();

            // As the element already exist, order will be different
            var order = getOrder(componentId);
            if (order) {
                objData.order = order;
                objData.type = componentInitialId;
                objData.message = message;
                objData.error = error;
                objData.text = text;
            }

            return objData;
        };

        // This method will fetch properties of form element component
        var fetchFormElementProperties = function(componentId, componentInitialId, objData) {
            var formComponent = $(".form-element-type");
            var formElementFontSize = $(formComponent).find(".font-size option:selected").val();
            var formElementFontFace = $(formComponent).find('.font-face .font-face-dropdown option:selected').val();
            var formAlignVal = $(formComponent).find(".btn-align .active").val();
            var formTextAlignVal = $(formComponent).find(".text-align .active").val();
            var formElementTextColors = $(formComponent).find('.well .demo i').css('background-color');

            // As the element already exists, order will be different
            var order = getOrder(componentId);

            objData.order = order;
            objData.type = componentInitialId;

            if (formElementFontFace === "Device Default") {
                formElementFontFace = "";
            }

            var formComponentObject = {
                propertyList: ['FontFace', 'FontSize', 'TextColor', 'Alignment', 'TextAlignment'],
                elementArray: {
                    FontFace: formElementFontFace,
                    FontSize: formElementFontSize,
                    TextColor: formElementTextColors,
                    Alignment: formAlignVal,
                    TextAlignment: formTextAlignVal
                },
                propertyFound: []
            };

            var formComponentData = getComponentPropertyList(objData, formComponentObject);
            objData = formComponentData.propertyList;
            formComponentObject = formComponentData.componentObject;

            objData = setComponentProperty(formComponentObject, objData, 'FontFace', formElementFontFace);
            objData = setComponentProperty(formComponentObject, objData, 'FontSize', formElementFontSize);
            objData = setComponentProperty(formComponentObject, objData, 'formElementTextColors', formElementTextColors);
            objData = setComponentProperty(formComponentObject, objData, 'Alignment', formAlignVal);
            objData = setComponentProperty(formComponentObject, objData, 'TextAlignment', formTextAlignVal);

            return objData;
        };

        // This method will give component object information
        var formComponentInfo = function(componentType, componentId, componentInitialId, objData) {
            var pageComponentInfoObject = {};
            var order;
            var returnObj;

            if ($(".dyn-table .dyn-droppable").length > 0) {
                // Here new component is dropped any where on the page
                var currentOrder;
                $(".body .dyn-table td li.temp-component").each(function(index) {
                    var obj = $(this).data("property");
                    currentOrder = index;
                    if (obj) {
                        if ($(this).parents('tr').hasClass('dyn-droppable') === true) {
                            order = currentOrder;
                        }
                    } else {
                        if (!order && $(this).parents('tr').hasClass('dyn-droppable') === true || $(this).hasClass('dyn-droppable') === true) {
                            order = currentOrder;
                            return;
                        }
                    }
                });
            } else {
                // Here new component is dropped at the end
                order = $(".dyn-table td li.temp-component").length - 1;
            }

            if (!componentId && componentType !== "button") {
                return {type: componentInitialId, order: order};
            }

            switch (componentType) {
                case "paragraph":
                    objData = fetchParagraphProperties(componentId, componentInitialId, objData);
                    break;

                case "phonenumber":
                    objData = fetchPhoneNumberProperties(componentId, componentInitialId, objData);
                    break;

                case "button":
                    var title, buttonId;
                    $(".top-content-checkboxes").hide();
                    $(".layer-select-option").hide();

                    if (componentId) {
                        objData = fetchButtonProperties(componentId, componentInitialId, objData);
                    } else {
                        title = '';
                        buttonId = $('.button-type #select-button-type option:first').val();
                        if (buttonId) {
                            pageComponentInfoObject = {type: componentInitialId, title: title, "byttonType": buttonId, order: order};
                        } else {
                            pageComponentInfoObject = {type: componentInitialId, title: title, order: order};
                        }

                        // Update rest of the element's order below it as well
                        var elementArray = [];

                        // NOTE: Ignoring smart form as it is not associated with any order
                        $(".dyn-table td:not(.empty-container) > li:not(.smart-form-component)").each(function(index) {
                            var id = $(this).attr("id");
                            var obj = $(this).data('property');
                            if (id && obj) {
                                var objectData = $(this).data("property");
                                if (objectData.order !== index) {
                                    var obj = {};
                                    obj.newOrder = index;
                                    obj.id = id;
                                    elementArray.push(obj);
                                }
                            }
                        });

                        if (elementArray.length > 0) {
                            self.updateComponentOrder(elementArray);
                        }
                    }
                    break;

                case "image":
                    objData = fetchImageProperties(componentId, componentInitialId, objData);
                    break;

                case "carousel":
                    objData = fetchCarouselProperties(componentId, componentInitialId, objData);
                    break;

                case "smartform":
                    objData = fetchSmartFormProperties(componentId, componentInitialId, objData);
                    break;

                case "formelement":
                    objData = fetchFormElementProperties(componentId, componentInitialId, objData);
                    break;

                case "tablerow":
                default:
                    if (componentId) {
                        // As the element already exists, order will be different
                        order = getOrder(componentId);
                    }
                    break;
            }

            if (componentId) {
                returnObj = objData;
            } else {
                returnObj = pageComponentInfoObject;
            }

            return returnObj;
        };

        // This method will modify existing orders
        this.updateAllComponentOrder = function() {
            var elementArray = [];
            var currentOrder;
            // NOTE: Smart form is not associated to any order, hence ignoring
            $(".dyn-table tbody td .temp-component").each(function(index) {
                var obj = $(this).data("property");
                if (!($(this).find('ul').hasClass('smartform'))) {
                    currentOrder = index;
                    if (obj && obj.order !== currentOrder) {
                        var newObj = {};
                        newObj.newOrder = currentOrder;
                        newObj.id = $(this).attr("id");
                        elementArray.push(newObj);
                    }
                }
            });

            if (elementArray.length > 0) {
                self.updateComponentOrder(elementArray);
            }
        };

        // This method will update all existing orders
        this.updateComponentOrder = function(elementArray) {
            if (elementArray && elementArray.length > 0) {
                var appId = $("#application-name").attr("data-id");
                var pageId = $("#hidden-page-id").val();
                var orderElementArrLength = elementArray.length;
                for (var index = 0; index < orderElementArrLength; ++index) {
                    var currentObj = elementArray[index];
                    var element = $(".body .dyn-table #" + currentObj.id);
                    var objData = $(element).data("property");
                    objData.order = currentObj.newOrder;
                    $(element).data("property", objData);

                    // Make ajax request to update that element
                    var componentObj = {};
                    componentObj.type = "POST";
                    componentObj.async = true;
                    componentObj.dataType = 'json';
                    componentObj.data = {"type": 'content', 'appId': appId, 'pageId': pageId, 'entityId': currentObj.id, 'entityInfo': JSON.stringify(objData)};
                    componentObj.url = appGlobals.globals.appbuilderURL + 'edit-page-contents';

                    appGlobals.globals.ajaxCalling(componentObj);
                }
            }
        };

        // This method will set smart form name
        this.setSmartFormName = function(data) {
            formName = data;
        };

        // This method preview background image on page details.
        var showBackgroundImage = function(response) {
            var src = response.url;
            var imageId = response.id;
            if (response.type.type === ".pdf") {
                src = constants.PREVIEW_IMAGE;
            }
            var imageElement = $('.page-details .preview-bg-image');
            $(imageElement).addClass("img-added");
            $(imageElement).find('img').attr('src', src);
            $(imageElement).find('img').show();
            $(imageElement).find('img').attr('data-id', imageId);
        };

        // This method will populate smart form on dynamic page.
        var getSmartFormToPage = function(formId) {
            var smartFormInfoObject = {};
            var generalSetupObject = {};

            smartFormInfoObject.entityId = formId;
            smartFormInfoObject.type = 'form';
            generalSetupObject.type = "GET";
            generalSetupObject.async = true;
            generalSetupObject.dataType = 'json';
            generalSetupObject.data = smartFormInfoObject;
            generalSetupObject.url = appGlobals.globals.appbuilderURL + 'get-entity';
            appGlobals.globals.ajaxCalling(generalSetupObject, prepopulateSmartFormOnDynamicPage);
        };

        // This method will add components to dynamic-table
        var addContentsInTable = function(tableComponentArray) {
            var tableComponentArrayLength = tableComponentArray.length;
            for (var componentIndex = 0; componentIndex < tableComponentArrayLength; ++componentIndex) {
                var content = tableComponentArray[componentIndex];
                var cell = $(".body .dyn-table-container td#" + content.parentItem);
                var markup = $("#all #" + content.type).attr("data-markup");

                $(cell).removeClass("empty-container");
                var element = $(cell).find("> li");

                $(element).attr("id", content.id);
                $(element).attr("data-parent", content.parentItem);
                $(element).data('property', content);
                $(element).html(markup);
            }
        };

        // This method will add components to layout
        var addPageContents = function(data, smartFormItemListDetails, smartFormIdArr) {
            // Check if page has elements in it or not
            if (data.content) {
                var contents = data.content;
                // Check if table exists or not
                var isTableExist = false;
                var rowArray = [];
                var colArray = [];
                var tableComponentArray = [];
                var outerComponentArray = [];
                var tableObjIndex;
                var rowSpecificColumn = {};
                var contentsLength = contents.length;
                var submitBtn;

                for (var index = 0; index < contentsLength; ++index) {
                    var content = contents[index];
                    var type = '';
                    if ($("#all #" + content.type).attr("type")) {
                        type = $("#all #" + content.type).attr("type").toLowerCase();
                        if (type === 'button') {
                            submitBtn = true;
                        } else {
                            submitBtn = false;
                        }
                        switch (type) {
                            case "table":
                                isTableExist = true;
                                tableObjIndex = index;
                                break;

                            case "tablerow":
                                rowArray.push(content);
                                break;

                            case "tablecolumn":
                                var rowId = content.parentItem;
                                if (rowSpecificColumn[rowId]) {
                                    rowSpecificColumn[rowId] = ++rowSpecificColumn[rowId];
                                } else {
                                    rowSpecificColumn[rowId] = 1;
                                }

                                colArray.push(content);
                                break;

                            default:
                                if (content.parentItem) {
                                    tableComponentArray.push(content);
                                } else {
                                    outerComponentArray.push(content);
                                }
                                break;
                        }
                    } else if ($.inArray(content.arg1, smartFormIdArr) > -1 && content.arg1) {
                        if (content.parentItem) {
                            tableComponentArray.push(content);
                        } else {
                            outerComponentArray.push(content);
                        }
                    }
                }

                var tableInput = $(".table-type .selected-row, .table-type .selected-column");
                if (isTableExist === true) {
                    // Disable table grid for selection
                    $(tableInput).attr('disabled', 'disabled');
                    $(tableInput).addClass('noselect');
                    $('#selectable').selectable('disable');

                    // Hide smart form
                    $("#all [type='smartForm']").hide();

                    // Method to generate table
                    generateDynamicTable(contents, tableObjIndex, rowArray, colArray, rowSpecificColumn);
                } else {
                    // Enable table grid for selection
                    $(tableInput).removeAttr('disabled');
                    $(tableInput).removeClass('noselect');
                    $('#selectable').selectable('enable');

                    // Select canvas layout
                    appGlobals.globals.pubsubQueue.publish("showLayout", 'canvas');
                }

                // Add components to dynamic-table
                if (tableComponentArray.length > 0) {
                    addContentsInTable(tableComponentArray);
                }

                $(".body .dyn-table").remove();
                var componentList = [];
                var countOne = 0;
                var formComIndex = 0;
                var outerCompLength = outerComponentArray.length;
                for (var outerIndex = 0; outerIndex < outerCompLength; ++outerIndex) {
                    var content = outerComponentArray[outerIndex];
                    var dataMarkup, markup;
                    if (content.arg1 && (!content.byttonType || submitBtn)) {
                        if ($.inArray(content.arg1, smartFormIdArr) > -1 && content.arg1) {
                            $.each(smartFormItemListDetails, function(key, value) {
                                if (value.id === content.arg1) {
                                    var formElementName = value.type.name;
                                    formElementLength = formComIndex;
                                    markup = '<li class="temp-component smart-form-component span12 dyn-component form-element data-order-' + formComIndex + '" id="' + content.id + '" data-id="' + content.arg1 + '" data-type="formelement">' + formElementName + '</li>';
                                } else if (value.formUUID === content.arg1 && value.type.type === "SubmitButton") {
                                    var formElementName = value.type.name;
                                    formElementLength = formComIndex;
                                    markup = '<li class="temp-component smart-form-component span12 dyn-component data-order-' + formComIndex + '" id="' + content.id + '" data-id="' + content.arg1 + '" data-type="Button">' + formElementName + '</li>';
                                }
                            });
                        }
                        formComIndex = formComIndex + 1;
                    } else {
                        dataMarkup = $("#all #" + content.type).attr("data-markup");
                        markup = $("<li class='temp-component'></li>").html(dataMarkup);
                    }


                    var obj = {"data": content, "html": markup};
                    componentList[countOne] = obj;
                    countOne++;
                }

                var elementArr = [];
                var tempArr = [];
                var compListLength = componentList.length;
                for (var index = 0; index < compListLength; ++index) {
                    var componentObj = componentList[index];

                    if (componentObj) {
                        elementArr.push(componentObj.html);
                        tempArr.push(componentObj.data);
                    }
                }

                if (elementArr.length > 0) {
                    self.placeElement(elementArr, tempArr);
                    var dataCounter = 0;

                    $(".body .dyn-table td .temp-component").each(function() {
                        var data = tempArr[dataCounter];
                        if (tempArr[dataCounter] && !($(this).find('ul').hasClass('smartform'))) {
                            $(this).closest("li").attr("id", data.id);
                            $(this).closest("li").data("property", data);
                            dataCounter++;
                        }
                    });

                    // Updating smart form orders
                    self.updateAllComponentOrder();
                }

                // Attach event
                appGlobals.globals.pubsubQueue.publish("attachDroppableEvent");

                // Sorting event
                appGlobals.globals.pubsubQueue.publish("attachEvent");
            } else {
                // Enable table grid for selection
                var tableInput = $(".table-type .selected-row, .table-type .selected-column");
                $(tableInput).removeAttr('disabled');
                $(tableInput).removeClass('noselect');
                $('#selectable').selectable('enable');

                if (data.columns.columns === 1) {
                    self.resetPageCanvasHeight('hide');
                    var newPageTemplate = $("#empty-page-template").html();
                    $(".dynamic-content-setup #layout .body").html(newPageTemplate);

                    if (appGlobals.globals.isRetina === true) {
                        $("#canvas-layout img").attr('src', constants.CANVAS_IMAGE_2X);
                        $("#table-layout img").attr('src', constants.TABLE_IMAGE_2X);
                    } else {
                        $("#canvas-layout img").attr('src', constants.CANVAS_IMAGE);
                        $("#table-layout img").attr('src', constants.TABLE_IMAGE);
                    }
                } else {
                    appGlobals.globals.pubsubQueue.publish("showLayout", 'canvas');
                }
            }
        };

        // This method will show page details
        var generatePageDetails = function(data) {
            callbacks.clbkResetPageData();
            pageDetailsInfo = data;
            formName = "Smart Form";
            $(".page-details .delete-page").prop('disabled', false);
            var title = data.title;
            var pageImageElement = $('.page-details .preview-bg-image');
            title = title.substring(0, 25);
            $('#dynamic-content-setup header h1').html(title);
            $("#hidden-page-id").val(data.id);
            $("#page-name-text-box").val(title);
            $('.page-details .well .demo').colorpicker('setValue', 'rgba(0,0,0,0)');
            $(pageImageElement).removeClass("img-added");
            $(pageImageElement).find('img').attr('src', "");
            $(pageImageElement).find('img').hide();
            $(pageImageElement).find('img').attr('data-id', "");
            if (data.columns && $("#column-count [data-id='" + data.columns.id + "']").length > 0) {
                $("#column-count [data-id='" + data.columns.id + "']")[0].selected = true;
            }
            if (data.formId) {
                isFormPresent = true;
                $(".component-content .tabular-pane .smartform-content").hide();
            } else {
                isFormPresent = false;
                $(".component-content .tabular-pane .smartform-content").show();
            }

            if (data.category !== undefined && data.category !== "") {
                var category = data.category;
                $(".page-details #page-category-text-box").val(category.text);
                originalCategoryName = category.text;
            }

            if (data.properties !== undefined) {
                var dataPropertiesLength = data.properties.length;
                for (var i = 0; i < dataPropertiesLength; i++) {
                    switch (data.properties[i].name) {
                        case "PageInsets":
                            $('.page-details .top-padding-val').attr("id", data.properties[i].id);
                            var pageInsets = data.properties[i].value.split(",");
                            $('.page-details .top-padding-val').val(pageInsets[0]);
                            $('.page-details .left-padding-val').val(pageInsets[1]);
                            $('.page-details .bottom-padding-val').val(pageInsets[2]);
                            $('.page-details .right-padding-val').val(pageInsets[3]);
                            break;

                        case "DefaultRightTray":
                            $('.page-details .righttray').attr("id", data.properties[i].id);
                            if (data.properties[i].value === "1") {
                                $('.page-details .righttray').prop('checked', true);
                                $('.page-details .lefttray').prop('checked', false);
                                $('.page-details .select-tray').prop('checked', true);
                                $('.page-details .tray').removeAttr("disabled");
                            }
                            break;

                        case "HasNavbar":
                            $('.page-details .navbar').attr("id", data.properties[i].id);
                            if (data.properties[i].value === "1") {
                                $('.page-details .navbar').prop('checked', true);
                                $('.page-details .toolbar').removeAttr("disabled");
                            } else {
                                $('.page-details .navbar').prop('checked', false);
                                $('.page-details .toolbar').prop('checked', false);
                                $(".page-details .toolbar").attr("disabled", "disabled");
                            }
                            break;

                        case "ContentSpacing":
                            $('.page-details .content-spacing-val').attr("id", data.properties[i].id);
                            $('.page-details .content-spacing-val').val(data.properties[i].value);
                            break;

                        case "HasToolbar":
                            $('.page-details .toolbar').attr("id", data.properties[i].id);
                            if (data.properties[i].value === "1") {
                                $('.page-details .toolbar').prop('checked', true);
                            }
                            break;

                        case "DefaultLeftTray":
                            $('.page-details .lefttray').attr("id", data.properties[i].id);
                            if (data.properties[i].value === "1") {
                                $('.page-details .lefttray').prop('checked', true);
                                $('.page-details .righttray').prop('checked', false);
                                $('.page-details .select-tray').prop('checked', true);
                                $('.page-details .tray').removeAttr("disabled");
                            }
                            break;

                        case "Background_Image":
                            var obj = {};
                            $('.page-details .preview-bg-image').attr("id", data.properties[i].id);

                            var imageId = data.properties[i].value;
                            if (imageId) {
                                obj.type = "GET";
                                obj.async = true;
                                obj.url = appGlobals.globals.assetURL + "get-file-info";
                                obj.data = {"file": imageId};
                                appGlobals.globals.ajaxCalling(obj, showBackgroundImage);
                            }
                            break;

                        default:
                            break;

                    }
                }
            }
            if (data.bkColor) {
                var hexToRgb = appGlobals.globals.convertHexToRgb(data.bkColor);
                $('.page-details .well .demo').colorpicker('setValue', hexToRgb);
            }

            // Iterate through contents to form the page components
            appGlobals.globals.contents = data.content;
            if (data.formId) {
                // Disable column layout selection
                $('#column-count').attr('disabled', 'disabled');

                pageDetailsInfo = data;
                getSmartFormToPage(data.formId);
            } else {
                addPageContents(data);
            }

        };

        var prepopulateSmartFormOnDynamicPage = function(response) {
            var smartFormItemListDetails = [];
            var smartFormIdArr = [];
            var formId = response.id;
            formName = response.name;
            $("#select-dyn-smart-form").val(formId);
            if (response.items) {
                $.each(response.items, function(key, value) {
                    smartFormItemListDetails.push(value);
                    if (value.label === "Submit") {
                        smartFormIdArr.push(value.formUUID);
                    } else {
                        smartFormIdArr.push(value.id);
                    }
                });
            }
            addPageContents(pageDetailsInfo, smartFormItemListDetails, smartFormIdArr);
            // Resetting column layout
            self.resetColumn();
        };

        // This method will show or hide smart form from content-type list
        var toggleTableView = function(option) {
            var coulmnCount = parseInt($("#column-count").val());
            $("#all > div").each(function() {
                var dataType = $(this).attr("type").toLowerCase();
                if (dataType === "smartform") {

                    if (option === 'show' && coulmnCount === 1) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                }
            });
        };

        // This method will generate Dynamic Table
        var generateDynamicTable = function(contents, tableObjIndex, rowArray, colArray, rowSpecificColumn) {
            // Create table
            $("#layout .body").html('');
            appGlobals.globals.pubsubQueue.publish("showLayout", 'table');

            var tableObj = contents[tableObjIndex];
            var columnCount = rowSpecificColumn;

            // Adding rows and columns
            var data = {};
            data.row = rowArray;
            data.column = columnCount;
            appGlobals.globals.pubsubQueue.publish("addRowAndColumn", data);

            // Attach to table Id first and property
            var tableElement = $("#layout .body .dyn-table-container");
            var rowArrLength = rowArray.length;
            var colArrLength = colArray.length;
            $(tableElement).attr("id", tableObj.id);
            $(tableElement).data("property", tableObj);

            // Attaching Id to each table rows
            for (var rowIndex = 0; rowIndex < rowArrLength; ++rowIndex) {
                var row = rowArray[rowIndex];
                var rowElement = $("#" + row.id);

                $(rowElement).data('property', row);
                $(rowElement).attr("data-parent", row.parentItem);
            }

            // Attaching Id to each table cell
            for (var columnIndex = 0; columnIndex < colArrLength; ++columnIndex) {
                var column = colArray[columnIndex];
                var index = appGlobals.globals.findIndexOfElement(column.properties, "Index");
                var cellElement = $(tableElement).find('.dyn-table-row#' + column.parentItem + " td:eq(" + index + ")");

                if ($(tableElement).find('.dyn-table-row#' + column.parentItem).length > 0 && $(cellElement).length > 0) {
                    $(cellElement).attr("id", column.id);
                    $(cellElement).data("property", column);
                    $(cellElement).attr("data-parent", column.parentItem);
                }
            }

            // Attach event
            appGlobals.globals.pubsubQueue.publish("attachDroppableEvent");
            // Attaching sortable event on page canvas
            appGlobals.globals.pubsubQueue.publish("attachEvent");
        };

        // This method will set up application content types
        var setUpAppContentTypeList = function() {
            appGlobals.globals.ContentType = {};
            var data = appGlobals.globals.AppContentType;
            var dataLength = data.length;

            for (var index = 0; index < dataLength; ++index) {
                switch (data[index].type.toLowerCase()) {
                    case "tablerow":
                        appGlobals.globals.ContentType.tablerow = data[index];
                        break;

                    case "space":
                        appGlobals.globals.ContentType.space = data[index];
                        break;

                    case "phonenumber":
                        appGlobals.globals.ContentType.phonenumber = data[index];
                        break;

                    case "table":
                        appGlobals.globals.ContentType.table = data[index];
                        break;

                    case "weblink":
                        appGlobals.globals.ContentType.weblink = data[index];
                        break;

                    case "paragraph":
                        appGlobals.globals.ContentType.paragraph = data[index];
                        break;

                    case "image":
                        appGlobals.globals.ContentType.image = data[index];
                        break;

                    case "carousel":
                        appGlobals.globals.ContentType.carousel = data[index];
                        break;

                    case "tablecolumn":
                        appGlobals.globals.ContentType.tablecolumn = data[index];
                        break;

                    case "button":
                        appGlobals.globals.ContentType.button = data[index];
                        break;

                    case "redirect":
                        appGlobals.globals.ContentType.redirect = data[index];
                        break;

                    case "weather":
                        appGlobals.globals.ContentType.weather = data[index];
                        break;

                    case "propertylist":
                        appGlobals.globals.ContentType.propertylist = data[index];
                        break;

                    default:
                        break;
                }
            }
        };

        // This method will fetch list of content-types associated to specific app
        var generateContentType = function() {
            // Generating markup for application specific content type
            $(".content-type #all").html('');
            Mustache.tags = ["{|", "|}"];
            var selectListTemplate = $("#app-content-type").html();
            var data = {'data': appGlobals.globals.AppContentType};
            $('.content-type #all').html(Mustache.render(selectListTemplate, data));

            $('.content-type #all > div').each(function() {
                var component = $(this).html().toLowerCase();

                if (component === "table" || component === "row" || component === "column") {
                    $(this).hide();
                    return;
                }

                var markUp = $(this).attr("data-markup");
                if (component.indexOf('button') > -1) {
                    markUp = markUp.replace("dyn-component", "dyn-component dyn-button");
                    $(this).attr("data-markup", markUp);
                } else if (component.indexOf('smart form') > -1) {
                    markUp = markUp.replace("dyn-component", "dyn-component fieldset smartform");
                    markUp = markUp.replace(">Smart Form", "><h1><span><img src=''></img>Smart Form</span></h1>");
                    $(this).attr("data-markup", markUp);
                }
            });

            // Attach droppable event
            appGlobals.globals.pubsubQueue.publish("attachDroppableEventInCanvas");
        };

        // This method will fetch list of content-types associated to specific app
        this.getApplicationContentType = function(response, tableResponse) {
            if (response && response.action !== 'drawTable') {
                var contentData = [];
                $(response).each(function(key, value) {
                    if (value.type !== "Form Element") {
                        contentData.push(value);
                    }
                });

                // Fetch associated content type
                appGlobals.globals.AppContentType = contentData;
                appGlobals.globals.isUpdateAppContentTypeList = 0;
                if (tableResponse && !appGlobals.globals.ContentType.table) {
                    appGlobals.globals.pubsubQueue.publish("resetContentType");
                }
                setUpAppContentTypeList();
                generateContentType();

                // Generate table on page canvas
                if (tableResponse) {
                    appGlobals.globals.pubsubQueue.publish("drawTableOnCanvas", tableResponse);
                }
            } else {
                // Fetching list of content types associated to specific application
                var appId = $("#application-name").attr("data-id");
                if (jQuery.isEmptyObject(appGlobals.globals.AppContentType) || appGlobals.globals.isUpdateAppContentTypeList) {
                    var obj = {};
                    obj.type = "GET";
                    obj.async = "true";
                    obj.url = appGlobals.globals.appbuilderURL + "get-app-templates";
                    obj.data = {"appId": appId, "type": "content-types"};
                    if (response && response.action === 'drawTable') {
                        obj.ajaxComponent = response.data;
                    }
                    appGlobals.globals.ajaxCalling(obj, self.getApplicationContentType);
                } else {
                    setUpAppContentTypeList();
                    generateContentType();
                }
            }
        };

        //This method will update general setup.
        var updateGeneralSetUp = function() {
            // Fetching list of application specific content type.
            self.getApplicationContentType();
            // Fetching list of application specific button type.
            callbacks.clbkGenerateDynamicButtonList();
            // Fetching list of application specific fontList.
            appGlobals.globals.pubsubQueue.publish("generateFontsList");
            // Fetching list of application specific smart form list.
            appGlobals.globals.pubsubQueue.publish("generateSmartFormList");
        };

        // This method preview background image on button component
        var showBackgroundImageButtonOne = function(response) {
            var src = response.url;
            var imageId = response.id;
            $("#btn-img-display-1").addClass('img-added');
            $("#btn-img-display-1 img").css('display', 'block');
            $('.btn-img-display-1 img').attr("src", src);
            $('.btn-img-display-1 img').attr("data-id", imageId);
        };

        // This method preview background image on button component
        var showBackgroundImageButtonTwo = function(response) {
            var src = response.url;
            var imageId = response.id;
            $("#btn-img-display-2").addClass('img-added');
            $("#btn-img-display-2 img").css('display', 'block');
            $('.btn-img-display-2 img').attr("src", src);
            $('.btn-img-display-2 img').attr("data-id", imageId);
        };

        // This method will make call to fetch venues list as per application ID
        this.makeVenueCall = function(response) {
            if (response) {
                appGlobals.globals.pubsubQueue.publish("initializeVenueList", response);
            } else {
                var obj = {};
                var appId = $("#application-name").attr("data-id");
                var data = {"appId": appId, "type": 'layers'};
                obj.data = data;
                obj.url = appGlobals.globals.appbuilderURL + 'get-app-templates';
                appGlobals.globals.ajaxCalling(obj, self.makeVenueCall);
            }
        };

        // This method will generate HTML tags for app list using mustache
        var appList = function(data) {
            // If app Id exists in session then set is default set
            var imgResponsive = $("#application-name .img-responsive");
            if (appGlobals.globals.sessionAppId) {
                $("#application-name").attr("data-id", appGlobals.globals.sessionAppId);
                $.map(data, function(item) {
                    if (item.maasId === parseInt(appGlobals.globals.sessionAppId)) {
                        $("#application-name .selected-name").html(item.name);
                        $("#application-name").attr("data-id", item.maasId);

                        // Assign application OS icon to element
                        $(imgResponsive).attr('src', appGlobals.globals.coreImgPath + item.OS + '-appbuilder.png');

                        // If retina display then replace application os icon with its 2x counterpart
                        if (appGlobals.globals.isRetina) {
                            displayRetinaImg(imgResponsive, 'app-builder');
                        }
                    }
                });
            } else {
                // Else set first app as default app
                $("#application-name .selected-name").html(data[0].name);
                $("#application-name").attr("data-id", data[0].maasId);

                // Assign application OS icon to element
                $(imgResponsive).attr('src', appGlobals.globals.coreImgPath + data[0].OS + '-appbuilder.png');

                // If retina display then replace application os icon with its 2x counterpart
                if (appGlobals.globals.isRetina) {
                    displayRetinaImg(imgResponsive, 'app-builder');
                }
            }

            var mustacheData = [];

            // Add extra element to array to identify if application OS is iOS or Android
            $.map(data, function(item) {
                if (item.OS === 'ios') {
                    item.ios = true;
                } else {
                    item.ios = false;
                }
                mustacheData.push(item);
            });

            // Common code
            data = {"value": mustacheData};
            var selectappListTemplate = $("#app-list").html();
            Mustache.tags = ['{|', '|}'];
            $('.app-list').html(Mustache.render(selectappListTemplate, data));

            var selectedAppId = $("#application-name").attr("data-id");
            var selectedAppVersion = $("li[data-id='" + selectedAppId + "']").attr("value");
            $("#application-name .selected-name").attr("value", selectedAppVersion);

            // Initialize venue list using publisher subscriber
            appGlobals.globals.pubsubQueue.publish("makeVenueCall");
            updateGeneralSetUp();
            appGlobals.globals.pubsubQueue.publish("generateColumnList");
            generateBuildingList();
            getApplicationCategories();
            getImageData();
            // If retina display then replace all application os icons with their 2x counterpart
            if (appGlobals.globals.isRetina) {
                displayRetinaImg('.dropdown-menu.app-list li', 'app-builder');
            }
        };

        // This method will remove background image
        var removeBackgroundComponentImage = function() {
            $('.preview-bg-image').find('img').attr("src", "");
            $('.preview-bg-image').find('img').attr("data-id", "");
            $('.preview-bg-image').removeClass('img-added');
            $('.preview-bg-image img').css('display', 'none');
            $('.save-page').click();
        };

        var folderLogoClick = function() {
            $(this).parent().find(".foldername").dblclick();
        };

        // This method will place elements to outer layout
        this.attachElementToOuterLayout = function(dataObj) {
            var elementArr = dataObj.elementList;
            var objArr = dataObj.objArr;

            self.placeElement(elementArr, objArr);
        };

        this.updateComponent = function(componentObj, isAsync) {
            var appId = $("#application-name").attr("data-id");
            var pageId = $("#hidden-page-id").val();

            var updatingObj = {};
            updatingObj.type = "POST";
            updatingObj.async = true;
            if (isAsync === false) {
                updatingObj.async = false;
            }
            updatingObj.dataType = 'json';

            updatingObj.data = {"type": 'content', 'appId': appId, 'pageId': pageId, 'entityId': componentObj.id, 'entityInfo': JSON.stringify(componentObj)};
            updatingObj.url = appGlobals.globals.appbuilderURL + 'edit-page-contents';

            appGlobals.globals.ajaxCalling(updatingObj);
        };

        // This method will place elements as per desired column
        this.placeElement = function(elementArr, objectArr) {
            var tableTemplate = "<div><table class='dyn-table'><tr></tr></table></div>";
            var columnCount = parseInt($("#column-count").val());
            var tdTemplate = "";
            var element;

            for (var index = 0; index < columnCount; ++index) {
                tdTemplate = tdTemplate + "<td class='empty-container'></td>";
            }
            atOnce = true;
            var elementArrLength = elementArr.length;
            for (var elementIndex = 0; elementIndex < elementArrLength; ++elementIndex) {
                var isTableExist = $.trim($("#layout .body .dyn-table").html()).length > 0 ? true : false;
                element = elementArr[elementIndex];
                var isButton = $(element).find(".dyn-button").length > 0 ? true : false;
                var isSmartform = $(element).find(".smartform").length > 0 ? true : false;
                var isformElement = false;
                var isWithinform;

                if (($(element).hasClass('form-element') === true) || ($(element).attr('data-type') === "formelement")) {
                    isformElement = true;
                }

                if (objectArr && objectArr[elementIndex].arg1 && !objectArr[elementIndex].byttonType) {
                    isWithinform = true;
                }

                if (isWithinform === true) {
                    isformElement = true;
                }
                if (isSmartform === true) {
                    atOnce = false;
                    $(".component-content .tabular-pane .smartform-content").hide();
                }
                if (isSmartform === true && isformElement === true) {
                    atOnce = true;
                    isSmartform = false;
                }
                if (isButton === true && isformElement === true) {
                    isButton = false;
                }
                if ($("#layout .body .dyn-table .dyn-component").hasClass('smartform')) {
                    atOnce = false;
                }
                if (isTableExist) {
                    // Check if we need to add a new row in table
                    var addNewRow = $("#layout .body .dyn-table .empty-container").length === 0 ? true : false;
                    if (isformElement === true) {
                        addNewRow = $(".dyn-table td ul.smartform").length > 0 ? false : true;
                    }

                    if (addNewRow) {
                        $("#layout .body .dyn-table").append('<tr></tr>');
                        if (isButton) {
                            $("#layout .body .dyn-table tr:last-child").html(tdTemplate);
                        } else if (isSmartform) {
                            $("#layout .body .dyn-table tr:last-child").html(tdTemplate);
                        } else if (isformElement) {
                            $("#layout .body .dyn-table tr:last-child").html(tdTemplate);
                        } else {
                            $("#layout .body .dyn-table tr:last-child").html("<td class='empty-container' colspan='" + columnCount + "'></td>");
                        }
                    } else {
                        // Checking if component is other that button
                        if (isButton === false) {
                            // Check if space is available to add component
                            var emptyContainers = $("#layout .body .dyn-table tr:last-child").find(".empty-container").length;
                            var canSpan = emptyContainers === columnCount ? true : false;
                            if (canSpan) {
                                $("#layout .body .dyn-table tr:last-child").html("<td class='empty-container' colspan='" + columnCount + "'></td>");
                            } else if (!isformElement) {
                                // Add new row for new element
                                $("#layout .body .dyn-table").append('<tr></tr>');
                                $("#layout .body .dyn-table tr:last-child").html("<td class='empty-container' colspan='" + columnCount + "'></td>");
                            }
                        }
                    }
                } else {
                    // False : Create table as per column selected
                    if (isButton) {
                        tableTemplate = $(tableTemplate).find("tr").append(tdTemplate).parents("div").html();
                    } else if (isformElement) {
                        tableTemplate = $(tableTemplate).find("tr").html("<td class='empty-container'></td>").parents("div").html();
                    } else {
                        tableTemplate = $(tableTemplate).find("tr").html("<td class='empty-container' colspan='" + columnCount + "'></td>").parents("div").html();
                    }
                    $("#layout .body").append(tableTemplate);
                }

                // Finally stacking elements to desired position
                var container = $("#layout .body .dyn-table tr:last-child .empty-container:eq(0)");
                if (isButton) {
                    container = $("#layout .body .dyn-table tr .empty-container:eq(0)");
                } else if (isSmartform) {
                    container = $("#layout .body .dyn-table tr .empty-container:eq(0)");
                    $('.empty-container').addClass('formTd');
                } else if (isformElement) {
                    if (atOnce === true) {
                        $("#layout .body .dyn-table tr .empty-container:eq(0)").html('<li class="" id="' + formEid + '" data-ajax="1"><ul class="span12 dyn-component fieldset smartform ui-sortable" data-type="SmartForm"><h1><span><img src="../bundles/phunwaremaasvscportal/img/form_icon.png">Smart Form</span></h1><i class="icon-remove-circle" style="display: none;"></i></ul></li>');
                        atOnce = false;
                    }
                    container = $("#layout .body .dyn-table tr td .smartform");
                    $('.smartform').parents('td').addClass('smartformTd');
                    if ($(element).hasClass('temp-component')) {
                        $(element).addClass('form-element smart-form-component');
                    }
                }

                // Finally placing element
                $(container).append(element);

                if ($(element).hasClass('data-order-' + formElementLength + '')) {
                    isWithinform = false;
                }

                $('.smartform-type select').removeAttr('disabled', 'disabled');
                $(".smartform h1 span").html("<img src='" + constants.FORM_ICON + "'></img>" + formName);
                $(container).removeClass("empty-container");
                $(container).parent().parent().removeClass("empty-container");

                // Setting smart form's sort event
                appGlobals.globals.pubsubQueue.publish("setDynFormEvent");

                // Finally Reattaching object if exist
                if (objectArr && objectArr.length > 0) {
                    if ($(container).find("> li").hasClass('smart-form-component')) {
                        $(element).data("property", objectArr[elementIndex]);
                    } else {
                        $(container).find("> li").data("property", objectArr[elementIndex]);
                    }
                }
            }

            appGlobals.globals.pubsubQueue.publish("resetSmartFormHeight");
        };

        // This method will resize the dynamic content flyover as per screen size
        var resizeFlyover = function() {
            var height = $("body").height();
            var sectionHeight = height - 300;
            var bodyDropable = height - 175;
            var dynamicTabcontent = height - 280;
            var dynFlyover = height - 10;
            var flyComponentHeight = height - 125;

            $(".dynamic-content .section-body").css("height", sectionHeight);
            $(".dynamic-content-setup #layout .body").css("height", bodyDropable);
            $(".dynamic-content section .tab-content").css("min-height", dynamicTabcontent);
            $(".dynamic-content-setup .dyn-flyover").css("height", dynFlyover);
            $(".dyn-flyover .dyn-flyover-left").css("min-height", dynFlyover);
            $(".dyn-flyover .dyn-flyover-right").css("min-height", dynFlyover);
            $(".dyn-flyover .dyn-flyover-right .component-content").css("height", flyComponentHeight);

            self.bodyHeight = bodyDropable;
        };

        // This method will generate buildings list for dynamic content
        var generateBuildingList = function(response) {
            var appId = $("#application-name").attr("data-id");
            if (response) {
                var html = '';

                if (response.failure) {
                    $("#map-dropdown .drop-down-header .second .caret-link").attr("data-toggle", "");
                    $("#map-dropdown .drop-down-header .auto-complete").attr("contenteditable", false).html("No buildings available.");
                } else {
                    $.each(response, function(key, val) {
                        var name = val.name;
                        var id = val.id;

                        var length = name.length;
                        var selectedOption = name;
                        if (length > 30) {
                            selectedOption = name.slice(0, 30);
                            selectedOption = selectedOption + "...";
                        }
                        html = html + '<li><label><input type="checkbox" id="' + id + '"><span><a title="' + name + '">' + selectedOption + '</a></span></label></li>';
                    });
                }
                html = html + '<li class="no-match-found"><label><span><a title="" id="">No Matches Found</a></span></label></li>';
                $("#map-dropdown .drop-down-body ul").html(html);
            } else {
                // Ajax call to get list first
                var obj = {"type": "GET", "async": true, "url": appGlobals.globals.appbuilderURL + "get-buildings", data: {"appId": appId}};
                appGlobals.globals.ajaxCalling(obj, generateBuildingList);
            }
        };

        // This object contains list of all callbacks
        var callbacks = {
            // This method will open dynamic component flyover
            clbkOpenDynamicFlyover: function() {
                var viewLayout = $(".layout-nav .selected-layout lable:visible").length > 0 ? true : false;
                if (viewLayout === true) {
                    if ($(".layout-nav .selected-layout lable").html().toLowerCase().indexOf('canvas') > -1) {
                        toggleTableView('show');
                    } else {
                        toggleTableView('hide');
                    }
                } else {
                    toggleTableView('show');
                }
                $('#dynamic-setup-edit-flyover').hide('slide', {direction: 'right'}, 500);
                $("#add-content-dyn-flyover .content-type").show();
                if (isFormPresent) {
                    $(".component-content .tabular-pane .smartform-content").hide();
                }
                $('#dynamic-setup-flyover').show('slide', {direction: 'right'}, 500);
            },
            // This method will close dynamic edit component flyover
            clbkCloseDynamicEditFlyover: function() {
                var checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;
                if (isButtonTypePresent && $("#select-button-type").find(':selected').attr("type") === '73' && checked > 0) {
                    $('#dynamic-setup-edit-flyover').hide('slide', {direction: 'right'}, 500);
                } else if (isButtonTypePresent && $("#select-button-type").find(':selected').attr("type") !== '73') {
                    $('#dynamic-setup-edit-flyover').hide('slide', {direction: 'right'}, 500);
                }
            },
            // This method will update image data
            clbkGetFolderImageData: function(response) {
                appGlobals.globals.getImageData = response;
            },
            //This function will generate common page list
            clbkCommonPageList: function() {
                var appId = $("#application-name").attr("data-id");
                var venue = $("#venue-name").attr("value");
                var data = {"appId": appId, "type": 'pages', "pageSize": 999};
                if (venue) {
                    data.venue = venue;
                }
                var obj = {"type": "GET", "async": true, "url": appGlobals.globals.appbuilderURL + 'get-app-templates', "data": data};
                appGlobals.globals.ajaxCalling(obj, callbacks.clbkGeneratePageListDropdown);
            },
            // This function will generate page dropdown list.
            clbkGeneratePageListDropdown: function(response) {
                allAppPages = response;
                var html = '';
                $(response).each(function(key, data) {
                    html = html + "<option value='" + data.id + "'>" + data.title + "</option>";
                });
                $(".category-type select").html(html);
            },
            // This method will open edit component flyover
            clbkDynFlyover: function(event) {
                event.stopPropagation();
                isButtonTypePresent = true;
                // Hide right menu
                $(".right-menu").hide();
                $(".insets-error, .padding-error").hide();
                var type, dataType, componentId;
                if ($(this).hasClass('selected-layout') === true) {
                    type = $(this).find('lable').html().toLowerCase().indexOf('table') > -1 ?
                            'Table' : 'Canvas';
                } else {
                    type = $(this).attr('data-type');
                }

                if ($(this).hasClass("rows-tr") === true || $(this).hasClass("edit-component") === true) {
                    // From dynamic inner table
                    dataType = type.toLowerCase();
                    componentId = $(this).attr("id");
                } else {
                    // From outer table
                    dataType = type.toLowerCase();
                    componentId = $(this).closest("li").attr("id");
                }
                if (type === 'Table') {
                    componentId = $(".dyn-table-container").attr("id");
                }

                $("#add-content-dyn-edit-flyover > div").hide();
                $('#dynamic-setup-edit-flyover').show('slide', {direction: 'right'}, 500);
                callbacks.clbkOnFlyoverClose();
                $("#hidden-component-type").val(dataType);
                $("#hidden-component-save-id").val(componentId);
                var componentData = $("#" + componentId).data("property");

                // Sliding in respective flyover
                switch (dataType) {
                    case "button":
                        var buttonType = componentData.byttonType;
                        var totalLayerList = 0;
                        var totalLayer = 0;

                        if (buttonType) {
                            $('.button-type #select-button-type').css('border', '1px solid #ccc');
                        }
                        var buttonTypeId;
                        $('.dyn-flyover-right .align-style .btn').removeClass('active');
                        var propertiesData = [];
                        $(".content-category-1").val('');
                        $(".content-category-2").val('');
                        $(".button-type .button-name").val('');
                        $(".button-type .button-name").val(componentData.title);
                        $(".button-type .button-name").attr("ButtonType", '');
                        $(".button-type .button-name").attr("ButtonType", componentData.type);
                        $('.button-type #select-button-type option').removeAttr("selected");
                        $('.button-type .category-type select').prop('selectedIndex', 0);
                        $('.button-type #btn-img-display-1 img').attr("src", "");
                        $('.button-type #btn-img-display-2 img').attr("src", "");
                        $('.button-type #btn-img-display-1 img').attr("data-id", "");
                        $('.button-type #btn-img-display-2 img').attr("data-id", "");
                        $('.button-type #select-button-type option').removeAttr('selected');
                        $('.button-type #select-button-type option[value="' + buttonType + '"]').attr('selected', 'selected');
                        $('.button-type #select-button-type').val(buttonType);
                        $('.button-type .btn-type select').removeAttr('disabled', 'disabled');
                        $.each(appGlobals.globals.AppButtonType, function(key, value) {
                            if (value.id === buttonType) {
                                buttonTypeId = value.type;
                            }
                        });
                        if (buttonTypeId !== 42) {
                            $(".button-type .btn-type #select-button-type option[type=" + 42 + "]").hide();
                        }
                        if (componentData.arg1) {
                            $(".content-category-1").val(componentData.arg1);
                        }
                        if (componentData.arg2) {
                            $(".content-category-2").val(componentData.arg2);
                        }
                        $(".category-name, .category-name-1, .category-name-2").hide();
                        $(".content-category-1, .content-category-2").hide();
                        $(".category-type").hide();
                        $("#map-dropdown").hide();
                        $("#layer-dropdown").hide();
                        $(".top-content-checkboxes").hide();
                        $(".layer-select-option").hide();
                        $(".drop-down-wrapper").find(".drop-down-body").addClass("hide");
                        switch (buttonTypeId) {
                            case 1:
                                // For dynamic Page
                                callbacks.clbkCommonPageList();
                                $(".category-name").html("Available Pages");
                                $(".category-type select").val(componentData.pageLink);
                                $(".category-type").show();
                                $(".category-name").show();
                                $(".content-category-1").val('');
                                break;

                            case 62:
                                // For Modal Web View
                                $(".category-name").html("Website URL");
                                $(".category-name").show();
                                $(".content-category-1").show();
                                $(".content-category-1").attr("placeholder", "e.g. http:www.phunware.com");
                                break;

                            case 84:
                                // For building map
                                $("#map-dropdown").show();
                                $(".category-name").html("Buildings To Display");
                                $(".category-name").show();
                                $("#map-dropdown .drop-down-header .total-selected span").html('');
                                $("#map-dropdown .drop-down-header .auto-complete").html('');
                                $("#map-dropdown .total-selected").css("display", "none");
                                $("#map-dropdown .drop-down-body-header a").html("Select All");
                                $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                                $("#map-dropdown .auto-complete").attr("placeholder", "Select one or more buildings");
                                $("#map-dropdown ul li input").prop("checked", false);
                                $("#map-dropdown .drop-down-body ul li").show();
                                $("#map-dropdown .drop-down-body ul li.no-match-found").hide();
                                if (componentData.arg1) {
                                    var buildings = componentData.arg1;
                                    buildings = buildings.split(",");
                                    $.each(buildings, function(index, value) {
                                        $("#map-dropdown ul li input#" + value).prop("checked", true);
                                    });
                                    var label = '';
                                    var total = $('#map-dropdown .drop-down-body ul li input').length;
                                    var checked = $('#map-dropdown .drop-down-body ul li input:checkbox:checked').length;
                                    $("#map-dropdown .auto-complete").attr("placeholder", "");
                                    if (total === checked) {
                                        label = "All Buildings";
                                        $("#map-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                                        $("#map-dropdown .drop-down-body-header a").html("De-select All");
                                        $("#map-dropdown .total-selected").css("display", "inline-block");
                                    } else if (checked) {
                                        label = checked + " Buildings Selected";
                                        if (checked === 1) {
                                            label = checked + " Building Selected";
                                        }
                                        $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                                        $("#map-dropdown .drop-down-body-header a").html("Select All");
                                        $("#map-dropdown .total-selected").css("display", "inline-block");
                                    } else {
                                        $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                                        $("#map-dropdown .drop-down-body-header a").html("Select All");
                                        $("#map-dropdown .auto-complete").attr("placeholder", "Select one or more buildings");
                                        $("#map-dropdown .total-selected").css("display", "none");
                                    }
                                    $("#map-dropdown .total-selected span").html(label);
                                }
                                break;

                            case 73:
                                // For layer picker
                                $(".top-content-checkboxes").show();
                                $(".layer-select-option").show();
                                $("#layer-dropdown").show();
                                $(".category-name").html("Layers To Display");
                                $(".category-name").show();
                                $("#layer-dropdown .drop-down-header .total-selected span").html('');
                                $("#layer-dropdown .drop-down-header .auto-complete").html('');
                                $("#layer-dropdown .total-selected").css("display", "none");
                                $("#layer-dropdown .drop-down-body-header a").html("Select All");
                                $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                                $("#layer-dropdown .auto-complete").attr("placeholder", "Select one or more layers");
                                $("#layer-dropdown ul li input").prop("checked", false);
                                $("#layer-dropdown .drop-down-body ul li").show();
                                $("#layer-dropdown .drop-down-body ul li.no-match-found").hide();
                                $("#layer-dropdown .drop-down-header").css('border', '1px solid #ccc');
                                var total, checked, label;

                                if (componentData.arg1) {
                                    var layers = componentData.arg1;
                                    layers = layers.split(",");
                                    totalLayer = layers.length;
                                    totalLayerList = $("#layer-dropdown ul li input").length;
                                    $.each(layers, function(index, value) {
                                        $("#layer-dropdown ul li input#" + value).prop("checked", true);
                                    });
                                    total = $('#layer-dropdown .drop-down-body ul li input').length;
                                    checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;
                                    label = '';
                                    $("#layer-dropdown .auto-complete").attr("placeholder", "");
                                    if (total === checked) {
                                        label = "All Layers";
                                        $("#layer-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                                        $("#layer-dropdown .drop-down-body-header a").html("De-select All");
                                        $("#layer-dropdown .total-selected").css("display", "inline-block");
                                        $("#layer-dropdown .drop-down-header .first .auto-complete").attr("placeholder", "");
                                    } else if (checked) {
                                        label = checked + " Layers Selected";
                                        if (checked === 1) {
                                            label = checked + " Layer Selected";
                                        }
                                        $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                                        $("#layer-dropdown .drop-down-body-header a").html("Select All");
                                        $("#layer-dropdown .total-selected").css("display", "inline-block");
                                    } else {
                                        $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                                        $("#layer-dropdown .drop-down-body-header a").html("Select All");
                                        $("#layer-dropdown .auto-complete").attr("placeholder", "Select one or more layers");
                                        $("#layer-dropdown .total-selected").css("display", "none");
                                    }
                                    $("#layer-dropdown .total-selected span").html(label);
                                } else {
                                    $("#layer-dropdown ul li input").prop("checked", true);
                                    total = $('#layer-dropdown .drop-down-body ul li input').length;
                                    checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;
                                    if (total === checked || checked === 0) {
                                        label = "All Layers";
                                        $("#layer-dropdown .total-selected").show();
                                        $("#layer-dropdown .total-selected span").html(label);
                                        $("#layer-dropdown .drop-down-header .first .auto-complete").attr("placeholder", "");
                                    }
                                }
                                $(".top-level-content").prop("checked", false);
                                $(".last-visited-layer").prop("checked", false);
                                if (componentData.arg3 === "1") {
                                    $(".top-level-content").prop("checked", true);
                                }
                                if (componentData.arg2 === "1") {
                                    $(".last-visited-layer").prop("checked", true);
                                }
                                break;

                            case 14:
                                // For PDF Document
                                $(".category-name").html("PDF Document");
                                $(".category-name").show();
                                $(".content-category-1").show();
                                $(".content-category-1").attr("placeholder", "e.g. http:www.phunware.com");
                                break;

                            case 61:
                                // For Send Email
                                $(".category-name").html("Send Email");
                                $(".category-name").show();
                                $(".content-category-1").show();
                                $(".content-category-1").attr("placeholder", "e.g. info@phunware.com");
                                break;

                            case 42:
                                // For submit button type
                                $('.button-type .btn-type select').attr('disabled', 'disabled');
                                $(".category-name, .category-type").hide();
                                break;

                            case 36:
                                // For Directory
                                $(".category-name-1, .category-name-2").show();
                                $(".category-name .tooltip-container").show();
                                $(".content-category-1, .content-category-2").show();
                                $(".content-category-1").attr("placeholder", "Copy & paste from CME");
                                $(".content-category-2").attr("placeholder", "All Directory items shown if left blank");
                                var appVersion = $("#application-name .selected-name").attr("value");

                                if (appVersion <= 4.0) {
                                    $(".category-name-1").hide();
                                    $(".content-category-1").hide();
                                    if (componentData.arg1) {
                                        $(".content-category-2").val(componentData.arg1);
                                    }
                                }
                                break;

                            case 56:
                                // For Phone Number
                                $(".category-name").html("Phone Number");
                                $(".category-name").show();
                                $(".content-category-1").show();
                                $(".content-category-1").attr("placeholder", "e.g. 444-444-4444");
                                break;

                            default:
                                $(".category-name").html("Argument 1");
                                $(".category-name").show();
                                $(".content-category-1").show();
                                $(".content-category-1").attr("placeholder", "");
                                break;

                        }

                        var selectfont = $('.button-type .font-size').find('select');
                        $(selectfont).html('');
                        for (var i = 8; i < 41; i++) {
                            selectfont.append('<option value="' + i + '">' + i + '</option>');
                        }
                        appGlobals.globals.pubsubQueue.publish("generateFontFaceDropDown");
                        var obj = {};
                        obj.type = "GET";
                        obj.async = true;
                        obj.url = appGlobals.globals.assetURL + "get-file-info";

                        if (componentData.imageId) {
                            obj.data = {"file": componentData.imageId};
                            appGlobals.globals.ajaxCalling(obj, showBackgroundImageButtonOne);
                        } else {
                            $("#btn-img-display-1").removeClass('img-added');
                            $("#btn-img-display-1 img").css('display', 'none');
                        }

                        if (componentData.selImageId) {
                            obj.data = {"file": componentData.selImageId};
                            appGlobals.globals.ajaxCalling(obj, showBackgroundImageButtonTwo);
                        } else {
                            $("#btn-img-display-2").removeClass('img-added');
                            $("#btn-img-display-2 img").css('display', 'none');
                        }

                        $(".button-type #btnPreload:checkbox").prop('checked', false);
                        if (componentData.precache) {
                            $(".button-type #btnPreload:checkbox").prop('checked', true);
                        }

                        if (componentData.properties) {
                            var properties = componentData.properties;
                            $.each(properties, function(key, value) {
                                propertiesData.push(value);

                                switch (value.name) {
                                    case "FontSize":
                                        $('.button-type .font-size').prop('selectedIndex', 0);
                                        $('.button-type .font-size option[value="' + value.value + '"]').attr('selected', 'selected');
                                        $('.button-type .font-size select').val(value.value);
                                        break;

                                    case "FontFace":
                                        var fontface = value.value;
                                        if (fontface === "") {
                                            fontface = "Device Default";
                                        }
                                        $(".button-type .font-face").attr("id", value.id);
                                        $('.button-type .font-face option[value="' + fontface + '"]').attr('selected', 'selected');
                                        $('.button-type .font-face option').removeAttr('selected');
                                        $('.button-type .font-face select').val(fontface);
                                        var selectedOptionFont = fontface;
                                        var optionCharLength = selectedOptionFont.length;
                                        var selectedOption = selectedOptionFont;
                                        if (optionCharLength > 16) {
                                            selectedOption = selectedOptionFont.slice(0, 16);
                                            selectedOption = selectedOption + "...";
                                        }
                                        if (selectedOption !== 'Select Font') {
                                            $('.button-type .font-face .font-face-dropdown option:selected').text(selectedOption);
                                            $('.button-type .font-face .font-face-dropdown option:selected').attr("value", selectedOptionFont);
                                        } else {
                                            $('.button-type .font-face .font-face-dropdown option:selected').text(selectedOption);
                                            $('.button-type .font-face .font-face-dropdown option:selected').attr("value", "Select Font");
                                        }
                                        break;

                                    case "TextColor":
                                        if (value.value) {
                                            var hexToRgb = appGlobals.globals.convertHexToRgb(value.value);
                                            $('.button-type .well .demo').colorpicker('setValue', hexToRgb);
                                        }
                                        break;

                                    case "Alignment":
                                        var alignment = value.value;
                                        $(".button-type .align-style .left-align").attr("id", value.id);
                                        $(".button-type .align-style .left-align .active").val(alignment);

                                        if (alignment === '0') {
                                            $(".button-type .align-style .left-align .align-left").addClass("active");
                                        } else if (alignment === '1') {
                                            $(".button-type .align-style .left-align .align-center").addClass("active");
                                        } else if (alignment === '2') {
                                            $(".button-type .align-style .left-align .align-right").addClass("active");
                                        }
                                        break;

                                    case "TextAlignment":
                                        var textAlignment = value.value;
                                        $(".button-type .align-style .right-align").attr("id", value.id);
                                        $(".button-type .align-style .right-align .active").val(textAlignment);

                                        if (textAlignment === '0') {
                                            $(".button-type .align-style .right-align .align-left").addClass("active");
                                        } else if (textAlignment === '1') {
                                            $(".button-type .align-style .right-align .align-center").addClass("active");
                                        } else if (textAlignment === '2') {
                                            $(".button-type .align-style .right-align .align-right").addClass("active");
                                        }
                                        break;

                                    default:
                                }
                            });
                        }
                        $("#add-content-dyn-edit-flyover .button-type").show();
                        if (totalLayerList !== totalLayer) {
                            $(".edit-btn-save").click();
                        }
                        break;

                    case "carousel":
                        var properties = componentData.properties;
                        $(".carousel-type .carousel-name").val('');
                        $(".carousel-type .inset .top").val('');
                        $(".carousel-type .inset .left").val('');
                        $(".carousel-type .inset .bottom").val('');
                        $(".carousel-type .inset .right").val('');
                        $('.carousel-type .time-period input').val('');
                        $('.carousel-type .width input').val('');
                        $('.carousel-type .height input').val('');
                        $('.carousel-type .effect select').val('');
                        $(".content-category-1").show();
                        $("#available-pages").html('');
                        var pageId = $("#hidden-page-id").val();
                        callbacks.clbkCommonPageList();

                        var pageData = {"value": allAppPages};
                        var selectListTemplate = $("#page-list-dropdown").html();
                        var carousalId = componentData.id;
                        var dataObj = {"type": 'carousel-page', "entityId": carousalId};
                        var obj = {"type": "GET", "async": true, "url": appGlobals.globals.appbuilderURL + 'get-entity', "data": dataObj};

                        appGlobals.globals.ajaxCalling(obj, showCarousalPages);

                        // HTML for venue drop down
                        Mustache.tags = ["{|", "|}"];
                        $('.dropdown-page-select').html(Mustache.render(selectListTemplate, pageData));
                        $('.dropdown-page-select li[value=' + pageId + ']').remove();
                        $(".carousel-type .carousel-name").val(componentData.title);

                        var propertiesData = [];
                        $.each(properties, function(key, value) {
                            propertiesData.push(value);

                            switch (value.name) {
                                case "Insets":
                                    var padding = value.value;
                                    var paddingData = padding.split(',');

                                    $(".carousel-type .inset .left").attr("id", value.id);
                                    $(".carousel-type .inset .top").val(paddingData[0]);
                                    $(".carousel-type .inset .left").val(paddingData[1]);
                                    $(".carousel-type .inset .bottom").val(paddingData[2]);
                                    $(".carousel-type .inset .right").val(paddingData[3]);
                                    break;

                                case "TimePeriod":
                                    var timeperiod = value.value;
                                    $('.carousel-type .time-period input').val(timeperiod);
                                    break;

                                case "Width":
                                    var width = value.value;
                                    $('.carousel-type .width input').val(width);
                                    break;

                                case "Height":
                                    var height = value.value;
                                    $('.carousel-type .height input').val(height);
                                    break;

                                case "Effect":
                                    var effect = value.value;
                                    $('.carousel-type .effect option[value="' + effect + '"]').attr('selected', 'selected');
                                    $('.carousel-type .effect select').val(effect);
                                    break;
                                default:
                            }
                        });
                        $("#add-content-dyn-edit-flyover .carousel-type").show();
                        break;

                    case "image":
                        var imageData = componentData;
                        appGlobals.globals.pubsubQueue.publish("generateImageFlyover", imageData);
                        break;

                    case "paragraph":
                        var paragraphData = componentData;
                        appGlobals.globals.pubsubQueue.publish("generateParagraphFlyover", paragraphData);
                        break;

                    case "phonenumber":
                        var phonenumberData = componentData;
                        appGlobals.globals.pubsubQueue.publish("generatePhoneNumberFlyover", phonenumberData);
                        break;

                    case "table":
                        var tableData = componentData;
                        appGlobals.globals.pubsubQueue.publish("generateTableFlyover", tableData);
                        break;

                    case "rows":
                        $("#add-content-dyn-edit-flyover .rows-type").show();
                        break;

                    case "columns":
                        $("#add-content-dyn-edit-flyover .columns-type").show();
                        if ($(this).parents().hasClass('merged')) {
                            $('.column-border').hide();
                            $('.column-padding').show();
                        }
                        break;

                    case "smartform":
                        appGlobals.globals.pubsubQueue.publish("generateSmartFormFlyover");
                        break;

                    case "formelement":
                        var formelementData = componentData;
                        appGlobals.globals.pubsubQueue.publish("generateFormElementFlyover", formelementData);
                        break;

                    case "canvas":
                        appGlobals.globals.pubsubQueue.publish("generateCanvasFlyover");
                        break;

                    default:
                        $(".contents .flyover-header").html($(this).text());
                        $("#add-content-dyn-edit-flyover .contents").show();
                }
            },
            // This method will open Edit table component type setup
            clbkEditComponentType: function(event) {
                event.stopPropagation();
                $("#add-content-dyn-edit-flyover > div").hide();
                callbacks.clbkOnFlyoverClose();
                $('#dynamic-setup-edit-flyover').show('slide', {direction: 'right'}, 500);
                $("#add-content-dyn-edit-flyover .edit-component-type").show();

                var compName = $(this).text();
                var componentType = $(this).attr("data-type");
                var row = $(this).parents("table").prev().html();
                var componentId = $(this).parent("li").attr("id");
                var columnId = $(this).parents("td").attr("id");

                $(".comp-name").text(compName);
                $(".comp-name").parent().attr("data-type", componentType);
                $("#add-content-dyn-edit-flyover .edit-component-type .edit-row").attr("data-row", row);
                $("#add-content-dyn-edit-flyover .edit-component-type .edit-column").attr("data-column", columnId);

                $(".comp-name").parent().attr("id", componentId);

                // Settings for column selection
                if ($(this).parents("td").hasClass("selected-table-column") === true) {
                    $(this).parents("td").removeClass("selected-table-column");
                } else {
                    var rowId = $(this).parents("table").attr("id");
                    $(".dyn-table-layout:not([id='" + rowId + "']) td").removeClass("selected-table-column");

                    $(this).parents("td").addClass("selected-table-column");
                }
            },
            // This method will open dynamic setup
            clbkShowDynamicSetup: function() {
                var pageId = $(this).closest("tr").attr("id");

                $('#dynamic-setup-edit-flyover').hide('slide', {direction: 'right'}, 500);
                $('.dyn-flyover .dyn-flyover-left .close-dyn-flyover').click();
                $('#dynamic-content-setup').show('slide', {direction: 'right'}, 500);
                $("#layout .body").html('');
                $("#column-count option:eq(0)")[0].selected = true;
                $(".v-line").remove();
                self.resetPageCanvasHeight('hide');

                // Enable column layout selection
                $('#column-count').removeAttr('disabled');

                var data = {"type": 'page', "entityId": pageId};
                var objects = {"type": "GET", "async": true, "url": appGlobals.globals.appbuilderURL + 'get-entity', "data": data};
                appGlobals.globals.ajaxCalling(objects, generatePageDetails);
            },
            // This method will show a new dynamic setup page
            clbkNewDynamicSetupPage: function() {
                self.resetPageCanvasHeight('hide');
                var newPageTemplate = $("#empty-page-template").html();
                $(".dynamic-content-setup #layout .body").html(newPageTemplate);
                isFormPresent = false;
                $(".component-content .tabular-pane .smartform-content").show();
                if (appGlobals.globals.isRetina === true) {
                    $("#canvas-layout img").attr('src', constants.CANVAS_IMAGE_2X);
                    $("#table-layout img").attr('src', constants.TABLE_IMAGE_2X);
                } else {
                    $("#canvas-layout img").attr('src', constants.CANVAS_IMAGE);
                    $("#table-layout img").attr('src', constants.TABLE_IMAGE);
                }

                // Enable table grid for selection
                var tableInput = $(".table-type .selected-row, .table-type .selected-column");
                $(tableInput).removeAttr('disabled');
                $(tableInput).removeClass('noselect');
                $('#selectable').selectable('enable');

                callbacks.clbkResetPageData();
                self.resetColumn();
                $('#dynamic-content-setup').show('slide', {direction: 'right'}, 500);
            },
            // This method reset page details data
            clbkResetPageData: function() {
                $('#dynamic-content-setup header h1').html("New Page");
                $("#page-name-text-box").val("");
                $(".page-name-error").hide();
                $("#page-category-text-box").val("");
                $('#dynamic-content-setup .section-content select').prop('selectedIndex', 0);
                $('#dynamic-content-setup .section-content .page-name input').val('');
                $('#dynamic-content-setup .section-content .options-padding ul li input').val(0);
                $('#dynamic-content-setup .section-content input:checkbox').removeAttr('checked');
                $(".page-opacity-label span").html(0);
                $(".page-details .page-name").removeClass("error");
                $(".page-details .options-padding ul li input").css("border", "1px solid #ccc");
                $(".options-padding-error").css("color", "1px solid #999999");
                $("#hidden-page-id").val('');
                $(".page-details .delete-page").prop('disabled', true);
                $(".page-details .demo").colorpicker('setValue', "rgba(0,0,0,0)");

                // Enable column layout selection
                $('#column-count').removeAttr('disabled');
                $("#column-count option:eq(0)")[0].selected = true;

                $(".page-details .tray").prop('checked', false);
                $(".options-padding-error").hide();
                pageDetailsInfo = '';
                // Attaching default image to background component
                appGlobals.globals.pubsubQueue.publish("removeComponentBackgroundImage", "preview-bg-image");
            },
            // This method will close dynamic setup
            clbkHideDynamicSetup: function() {
                var pageName = $.trim($("#page-name-text-box").val());
                var pageId = $("#hidden-page-id").val();
                var isVisible = $(".page-name-error").is(':visible');
                isButtonTypePresent = true;

                if (isVisible) {
                    $(".page-details .page-name").addClass("error");
                    return false;
                }
                if (!pageName && pageId) {
                    $(".page-details .page-name").addClass("error");
                    return false;
                } else {
                    $('.ajax-status-icons').show();
                    setTimeout(function() {
                        var isVisible = $(".page-details .page-name-error").is(':visible');
                        if (!isVisible) {
                            $(".page-details .page-name").removeClass("error");
                            $('#dynamic-content-setup').hide('slide', {direction: 'right'}, 500);
                            $(".close-dyn-flyover").click();
                            callbacks.clbkResetSearchPageList();
                        } else {
                            $('.ajax-status-icons').hide();
                        }
                    }, 4000);
                }
            },
            //This method will update dynamic setup page properties
            clbkUpdatePageProperties: function(properties, dataPropertiesLength) {
                for (var i = 0; i < dataPropertiesLength; i++) {
                    switch (properties[i].name) {
                        case "PageInsets":
                            $('.page-details .top-padding-val').attr("id", properties[i].id);
                            var pageInsets = properties[i].value.split(",");
                            $('.page-details .top-padding-val').val(pageInsets[0]);
                            $('.page-details .left-padding-val').val(pageInsets[1]);
                            $('.page-details .bottom-padding-val').val(pageInsets[2]);
                            $('.page-details .right-padding-val').val(pageInsets[3]);
                            break;

                        case "DefaultRightTray":
                            $('.page-details .righttray').attr("id", properties[i].id);
                            if (properties[i].value === "1") {
                                $('.page-details .righttray').prop('checked', true);
                                $('.page-details .lefttray').prop('checked', false);
                                $('.page-details .select-tray').prop('checked', true);
                                $('.page-details .tray').removeAttr("disabled");
                            }
                            break;

                        case "HasNavbar":
                            $('.page-details .navbar').attr("id", properties[i].id);
                            if (properties[i].value === "1") {
                                $('.page-details .navbar').prop('checked', true);
                                $('.page-details .toolbar').removeAttr("disabled");
                            } else {
                                $('.page-details .navbar').prop('checked', false);
                                $('.page-details .toolbar').prop('checked', false);
                                $(".page-details .toolbar").attr("disabled", "disabled");
                            }
                            break;

                        case "ContentSpacing":
                            $('.page-details .content-spacing-val').attr("id", properties[i].id);
                            $('.page-details .content-spacing-val').val(properties[i].value);
                            break;

                        case "HasToolbar":
                            $('.page-details .toolbar').attr("id", properties[i].id);
                            if (properties[i].value === "1") {
                                $('.page-details .toolbar').prop('checked', true);
                            }
                            break;

                        case "DefaultLeftTray":
                            $('.page-details .lefttray').attr("id", properties[i].id);
                            if (properties[i].value === "1") {
                                $('.page-details .lefttray').prop('checked', true);
                                $('.page-details .righttray').prop('checked', false);
                                $('.page-details .select-tray').prop('checked', true);
                                $('.page-details .tray').removeAttr("disabled");
                            }
                            break;

                        case "Background_Image":
                            var obj = {};
                            $('.page-details .preview-bg-image').attr("id", properties[i].id);

                            var imageId = properties[i].value;
                            if (imageId) {
                                obj.type = "GET";
                                obj.async = true;
                                obj.url = appGlobals.globals.assetURL + "get-file-info";
                                obj.data = {"file": imageId};
                                appGlobals.globals.ajaxCalling(obj, showBackgroundImage);
                            }
                            break;

                        default:
                            break;

                    }
                }
            },
            // This method will update dynamic setup page
            clbkUpdatePageId: function(response) {
                self.creatingPage = false;
                var hiddenPageId = $("#hidden-page-id").val();
                var properties = response.properties;
                if (!hiddenPageId && properties !== undefined) {
                    var dataPropertiesLength = properties.length;
                    callbacks.clbkUpdatePageProperties(properties, dataPropertiesLength);
                }
                $("#hidden-page-id").val(response.id);
                $(".page-details .delete-page").prop('disabled', false);
                pageDetailsInfo = response;
                // Check if element has been dropped in table
                if (isOnlySavepage) {
                    if ($(".body .dyn-table td > li").length > 0) {
                        callbacks.clbkSavePageComponent(undefined, "1");
                    } else {
                        callbacks.clbkSavePageComponent();
                    }
                }
                if (isSmartForm) {
                    isSmartForm = 0;
                    callbacks.clbkSelectDynamicSmartForm();
                }

                if (($(".layout-nav").is(":visible") === false) || ($(".layout-nav").is(":visible") === true &&
                        $(".layout-nav .selected-layout").html().toLowerCase().indexOf('canvas') > -1)) {
                    return;
                }
                // Code to save table if selected from grid
                if ($('#selectable').hasClass('ui-selectable-disabled') === false && $("#selectable li.ui-selected").length > 0) {
                    $('.edit-table-save').click();

                    // Disable table grid for selection
                    var tableInput = $(".table-type .selected-row, .table-type .selected-column");
                    $(tableInput).attr('disabled', 'disabled');
                    $(tableInput).addClass('noselect');
                    $('#selectable').selectable('disable');
                }
            },
            // This method will save page info
            clbkSaveDynamicSetupPage: function() {
                var appId = $("#application-name").attr("data-id");
                var venue = $("#venue-name").attr("value");
                var pageLayoutId = $("#column-count option:selected").attr("data-id");
                var pageLayoutNumber = $("#column-count option:selected").val();
                var pageLayoutName = $("#column-count option:selected").text();
                var pageName = $.trim($("#page-name-text-box").val());
                var pageCategory = $("#page-category-text-box").val();
                var optionsPaddingTop = $.trim($(".options-padding .top-padding-val").val());
                var optionsPaddingLeft = $.trim($(".options-padding .left-padding-val").val());
                var optionsPaddingBottom = $.trim($(".options-padding .bottom-padding-val").val());
                var optionsPaddingRight = $.trim($(".options-padding .right-padding-val").val());
                var paddingId = $('.page-details .top-padding-val').attr("id");
                var spacingId = $('.page-details .content-spacing-val').attr("id");
                var spacing = $(".page-details .content-spacing-val").val();
                var bkColor = $(".page-details .demo i").css('background-color');
                var bkimgId = $('.page-details .preview-bg-image').attr("id");
                var bkImage = $(".page-details .preview-bg-image img").attr("data-id");
                var padding = optionsPaddingTop + ',' + optionsPaddingLeft + ',' + optionsPaddingBottom + ',' + optionsPaddingRight;
                originalCategoryName = pageCategory;

                if (!bkImage) {
                    bkImage = "";
                }
                var propertyArray = [];
                var hasnavbarId = $('.page-details .navbar').attr("id");
                var hastoolbarId = $('.page-details .toolbar').attr("id");
                var lefttrayId = $('.page-details .lefttray').attr("id");
                var righttrayId = $('.page-details .righttray').attr("id");
                var tray = $(".page-details input[type=radio]:checked.tray").val();

                var navBar = "0";
                var toolBar = "0";
                var leftTray = "0";
                var rightTray = "0";

                if ($('.page-details .navbar').is(":checked")) {
                    navBar = "1";
                }
                if ($('.page-details .toolbar').is(":checked")) {
                    toolBar = "1";
                }
                if (tray === "1") {
                    leftTray = "1";
                }
                if (tray === "2") {
                    rightTray = "1";
                }

                propertyArray.push({"id": hasnavbarId, "name": 'HasNavbar', "value": navBar});
                propertyArray.push({"id": hastoolbarId, "name": 'HasToolbar', "value": toolBar});
                propertyArray.push({"id": lefttrayId, "name": 'DefaultLeftTray', "value": leftTray});
                propertyArray.push({"id": righttrayId, "name": 'DefaultRightTray', "value": rightTray});
                propertyArray.push({"id": spacingId, "name": "ContentSpacing", "value": spacing});
                propertyArray.push({"id": paddingId, "name": "PageInsets", "value": padding});
                propertyArray.push({"id": bkimgId, "name": "Background_Image", "value": bkImage});

                var columns = {
                    id: pageLayoutId,
                    name: pageLayoutName,
                    columns: pageLayoutNumber
                };

                var category = {
                    text: pageCategory
                };
                var bkColors = appGlobals.globals.generateColorCode(bkColor);
                var newPageObject = {
                    columns: columns,
                    title: pageName,
                    category: category,
                    properties: [],
                    bkColor: bkColors
                };

                newPageObject.properties = propertyArray;

                var objSaveDynamicSetup;
                var pageId = $("#hidden-page-id").val();
                if (pageId) {
                    objSaveDynamicSetup = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + "edit-entity", data: {"type": 'page', 'entityId': pageId, 'entityInfo': JSON.stringify(newPageObject)}};
                } else {
                    if (self.creatingPage === false) {
                        self.creatingPage = true;
                        objSaveDynamicSetup = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + "add-entity", data: {"type": 'page', 'appId': appId, 'venue': venue, 'info': JSON.stringify(newPageObject)}};
                    }
                }
                if (objSaveDynamicSetup) {
                    appGlobals.globals.ajaxCalling(objSaveDynamicSetup, callbacks.clbkUpdatePageId);
                }
            },
            // This method will check page name is already exists or not.
            clbkCheckDuplicatePageName: function() {
                var pageName = $.trim($("#page-name-text-box").val());
                var appId = $.trim($("#application-name").attr("data-id"));
                var venueId = $("#venue-name").attr("value");
                var obj = {};

                if (pageName && pageName !== pageDetailsInfo.title) {
                    obj.type = "GET";
                    obj.async = true;
                    obj.url = appGlobals.globals.appbuilderURL + "validate-entity-name";
                    obj.data = {"appId": appId, "type": "page", "name": pageName};
                    if (venueId) {
                        obj.data.venue = venueId;
                    }
                    appGlobals.globals.ajaxCalling(obj, callbacks.clbkSavePageName);
                }
            },
            // This method will save page name.
            clbkSavePageName: function(response) {
                $(".page-name-error").hide();
                if (response) {
                    $(".save-page").click();
                    if ($(".dyn-table td.formTd").find('div').hasClass('smartform')) {
                        $(".component-content .tabular-pane .smartform-content").hide();
                        isFormPresent = true;
                    } else {
                        isFormPresent = false;
                        $(".component-content .tabular-pane .smartform-content").show();
                    }
                } else {
                    $(".page-name-error").show();
                }
            },
            // This method will save page Details.
            clbkSavePageDetails: function() {
                var value = $.trim($(this).val());

                if (value <= 50 && value >= 0) {
                    $(".save-page").click();
                    $('.options-padding ul li input').css("border", "1px solid #ccc");
                    $(".options-padding-error").css("color", "#999999");
                    $(".options-padding-error").hide();
                } else {
                    $(".options-padding-error").css("color", "#e34948");
                    $(".options-padding-error").show();
                    $(this).val('');
                    $(this).focus();
                }
            },
            // This method will save page Details.
            clbkSavePageCategory: function() {
                var value = $.trim($(this).val());

                if (value !== $.trim(originalCategoryName)) {
                    $(".save-page").click();
                }
            },
            // This method will trigger when selected column number is changed
            clbkColumnChange: function() {
                var elementArr = [];
                var objArr = [];
                $("#layout .body .dyn-table tr td").each(function() {
                    if ($.trim(this.innerHTML).length > 0) {
                        var obj = $(this).find("> li").data("property");
                        elementArr.push(this.innerHTML);
                        objArr.push(obj);
                    }
                });

                // Disable smartform if column count is more than one else enable
                if (parseInt($(this).val()) === 1) {
                    $("#all [type='SmartForm']").show();
                } else {
                    $("#all [type='SmartForm']").hide();
                }

                // Re-arrange Page layout
                $("#layout .body").html('');
                self.placeElement(elementArr, objArr);

                // Attaching sortable event on page canvas
                appGlobals.globals.pubsubQueue.publish("attachEvent");

                // Setting smart form's sort event
                appGlobals.globals.pubsubQueue.publish("setDynFormEvent");

                self.resetColumn();

                self.updateAllComponentOrder();

                // Save page as well
                $("#dynamic-container .section-content .form-action .save-page").click();

            },
            // This method will Remove table Component callback
            clbkRemoveTableComp: function() {
                var tableId = $(".body .dyn-table-container").attr("id");
                if (!tableId) {
                    return false;
                }

                $("#reset-table").modal("hide");
                var newData = {"type": "page-content"};
                var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'delete-entity'};
                var table = $(".body .dyn-table-container");

                // Call API to delete cells as well as components in it
                $(table).find("td").each(function() {
                    var hasComponentInCell = $(this).hasClass('empty-container') === true ? false : true;
                    if (hasComponentInCell === true) {
                        var componentId = $(this).find('> li').attr('id');
                        newData.entityId = componentId;
                        obj.data = newData;
                        appGlobals.globals.ajaxCalling(obj);
                    }
                    var cellId = $(this).attr("id");
                    newData.entityId = cellId;
                    obj.data = newData;
                    appGlobals.globals.ajaxCalling(obj);
                });

                // Call API to delete rows
                $(table).find("table.dyn-table-row").each(function() {
                    var rowId = $(this).attr("id");
                    newData.entityId = rowId;
                    obj.data = newData;
                    appGlobals.globals.ajaxCalling(obj);
                });

                // Call API to remove table
                newData.entityId = tableId;
                obj.data = newData;
                appGlobals.globals.ajaxCalling(obj);

                $(table).remove();

                // Enable table grid for selection
                var tableInput = $(".table-type .selected-row, .table-type .selected-column");
                $(tableInput).removeAttr('disabled');
                $(tableInput).removeClass('noselect');
                $('#selectable').selectable('enable');
            },
            // This method will Remove SmartForm Component callback
            clbkRemoveSmartFormComp: function(outerComp) {
                if (outerComp.parent().attr('data-type') === "SmartForm") {
                    if ($(".smartform").find('li').hasClass('smart-form-component')) {
                        $(".smartform .temp-component .dyn-component .icon-remove-circle").click();
                        removeExistingSmartForm();
                    }
                    // Enable column layout selection
                    $('#column-count').removeAttr('disabled');

                    $('.smartform-type .component-content select').prop('selectedIndex', 0);
                    callbacks.clbkCloseDynamicEditFlyover();
                    outerComp.parents('tr').remove();
                    isFormPresent = false;
                    $(".component-content .tabular-pane .smartform-content").show();
                    return false;
                }
            },
            // This method will Remove outer Component callback
            clbkRemoveOuterComp: function(isTable) {
                if (isTable === false && parseInt($("#column-count").val()) > 1) {
                    var elementArray = [];
                    var elementObjectList = [];
                    $(".dyn-table td:not(.empty-container) > li.temp-component").each(function() {
                        var html = $(this);
                        var obj = $(this).data('property');
                        elementArray.push(html);
                        elementObjectList.push(obj);
                    });
                    $(".body .dyn-table").remove();
                    self.placeElement(elementArray, elementObjectList);
                }

                if (isTable === false) {
                    self.updateAllComponentOrder();
                }

                if ($(".body .dyn-table td:not(.empty-container)").length === 0) {
                    $(".body .dyn-table").remove();
                }
            },
            // This method will remove element from drag drop pane
            clbkRemoveComponent: function(event) {
                var isTable = $(event.target).attr('id') === "reset-table-confirm" === true ? true : false;

                if (isTable === true) {
                    callbacks.clbkRemoveTableComp();
                } else if ($(event.target).parents(".dyn-table-container").length > 0) {
                    // Deleting inner component inside the table layout
                    var entityId = $(this).parents("li").attr("id");
                    if (entityId) {
                        var data = {"type": "page-content", "entityId": entityId};
                        var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'delete-entity', "data": data};
                        appGlobals.globals.ajaxCalling(obj);
                    }
                    var parent = $(event.target.parentElement).parents("td");
                    var element = $(parent).find(">li");
                    $(parent).addClass("empty-container");
                    $(element).html("");
                    $(element).removeAttr("id");
                    $(element).removeAttr("data-parent");
                    $(element).removeData('property');

                    isTable = true;
                } else {
                    // Deleting component inside the outer layout
                    var entityId;
                    if ($(this).parent().parent().parent().attr('data-type') === "SmartForm") {
                        $(this).parent().parent().remove();
                        entityId = $(this).parent().parent().attr("id");
                    } else {
                        var outerComp = $(this);
                        callbacks.clbkRemoveSmartFormComp(outerComp);

                        outerComp.parents("td").remove();
                        entityId = outerComp.parents("li").attr("id");
                    }

                    if (entityId) {
                        var data = {"type": "page-content", "entityId": entityId};
                        var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'delete-entity', "data": data};
                        appGlobals.globals.ajaxCalling(obj);
                    }

                    $('#dynamic-setup-edit-flyover').hide('slide', {direction: 'right'}, 500);
                }
                callbacks.clbkRemoveOuterComp(isTable);

                $("#hidden-component-id").val('');
                $("#hidden-component-type").val('');
                $("#hidden-component-save-id").val('');
                $("#hidden-form-common-property-id").val('');

                // Attaching sortable event on page canvas
                appGlobals.globals.pubsubQueue.publish("attachEvent");

                $('#dynamic-setup-edit-flyover').hide('slide', {direction: 'right'}, 500);
                event.stopPropagation();

                self.resetColumn();
            },
            // This method will be called on mouseout of dropped components
            clbkOnComponentMouseout: function() {
                $(this).find(".icon-remove-circle").hide();
                $(this).css('border-color', '#cccccc');
                $(".fieldset span").css('color', '#000000');
            },
            // This method will display the page list as per selected app
            clbkAppChange: function() {
                var name = $(this).find(".name").html();
                var img = $(this).find("img").attr("src");
                var appId = $(this).attr("data-id");
                var version = $(this).attr("value");

                $("#venue-name .selected-name").html("Top Level Content");
                $("#venue-name").attr("value", "");
                $(".section-body").attr("data-page", 0);
                $("#application-name .selected-name").html(name);
                $("#application-name img").attr("src", img);
                $("#application-name").attr("data-id", appId);
                $("#application-name .selected-name").attr("value", version);

                // Re-intializing search text and filter
                $(".search-form input").val('');
                $("#clearfilter").click();
                appGlobals.globals.isUpdateAppContentTypeList = 1;
                appGlobals.globals.isUpdateAppDynamicButtonList = 1;
                appGlobals.globals.isUpdateAppFontList = 1;
                updateGeneralSetUp();
                // Initialize venue list using publisher subscriber
                appGlobals.globals.pubsubQueue.publish("makeVenueCall");

                // API calling to get page list as per selected application
                $(".section-body").attr("data-page", 0);

                // Generate column list as per app change
                appGlobals.globals.pubsubQueue.publish("generateColumnList");
            },
            // This method will toggle page list.
            clbkPageList: function() {
                $('#general-setup').hide('slide', {direction: 'right'}, 500);
                updateGeneralSetUp();
            },
            // This method will display the page list as per selected venue
            clbkVenueChange: function() {
                var name = $(this).find(".name").html();
                var value = $(this).attr("value");
                $("#venue-name .selected-name").html(name);
                $("#venue-name").attr("value", value);
                if (name === "Top Level Content") {
                    var ua = window.navigator.userAgent;
                    var msie = ua.indexOf("MSIE");

                    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
                        // If Internet Explorer, return version number
                        $("#venue-name").attr("value", "");
                    }
                }
                $(".section-body").attr("data-page", 0);
                callbacks.clbkUpdatePageList();

                // Re-intializing search text and filter
                $(".search-form input").val('');
                $("#clearfilter").click();
            },
            // This method will initiate search on hitting enter
            clbkSearchEntity: function(response) {
                var appId = $("#application-name").attr("data-id");
                $(".table tbody td .open .dropdown-toggle").click();
                if (response.type === "click" || response.type === "keyup") {
                    $(".section-body #list-table").attr("data-page", 0);
                    $(".section-body #list-table").attr("data-sort", 1);
                    var code = response.keyCode || response.which;
                    var searchBy = $.trim($(".dynamic-content .search-form .form-control").val());
                    if (!searchBy && response.type === "click") {
                        return false;
                    }
                    var pageIndex = $(".section-body #list-table").attr("data-page");
                    var sort = $(".section-body #list-table").attr("data-sort");
                    $("#home-page .list-table tr th i").addClass("fa-caret-up").removeClass("fa-caret-down");
                    if (code === 13 || response.type === "click") {
                        if (searchBy === "") {
                            $("#search-btn").removeClass("icon-remove");
                            $("#search-btn").addClass("icon-search");
                            $(".dynamic-content .search-form .form-control").val('');
                            callbacks.clbkUpdatePageList();
                        } else {
                            var venueId = $("#venue-name").attr("value");
                            var dynamicInfoObject = {};
                            $("#search-btn").removeClass("icon-search");
                            $("#search-btn").addClass("icon-remove");
                            dynamicInfoObject.type = "GET";
                            dynamicInfoObject.async = true;
                            dynamicInfoObject.dataType = 'json';
                            dynamicInfoObject.data = {"appId": appId, "searchText": searchBy, "pageIndex": pageIndex, "sort": sort};
                            if (venueId) {
                                data.venue = venueId;
                            }
                            dynamicInfoObject.url = appGlobals.globals.appbuilderURL + 'search-pages';
                            appGlobals.globals.ajaxCalling(dynamicInfoObject, callbacks.clbkSearchEntity);
                        }
                    }
                } else {
                    self.generateHTML(response);
                }
            },
            // This method will populate smart form on dynamic page
            clbkSelectDynamicSmartFormBase: function() {
                if ($(this).val() === "Select Smart Form") {
                    // Enable column layout selection
                    $('#column-count').removeAttr('disabled');
                    $("#all > div[type='SmartForm']").show();
                } else {
                    // Disable column layout selection
                    $('#column-count').attr('disabled', 'disabled');
                    $("#all > div[type='SmartForm']").hide();
                }

                var pageId = $("#hidden-page-id").val();
                if (pageId) {
                    callbacks.clbkSelectDynamicSmartForm();
                } else {
                    isSmartForm = 1;
                    isOnlySavepage = 0;
                    $("#dynamic-container .section-content .form-action .save-page").click();
                }
            },
            clbkUpdateFormElememt: function(response) {
                var pageId = response.id;
                pageDetailsInfo = response;
                $("#layout .body").html('');
                var data = {"type": 'page', "entityId": pageId};
                var obj = {"type": "GET", "async": true, "url": appGlobals.globals.appbuilderURL + 'get-entity', "data": data};
                appGlobals.globals.ajaxCalling(obj, callbacks.clbkSmartFormchange);
            },
            // This method will only update form element on smart form change
            clbkSmartFormchange: function(data) {
                pageDetailsInfo = data;
                getSmartFormToPage(data.formId);
            },
            // This method will populate smart form name
            clbkSmartFormNamePopulate: function(fName) {
                if (fName === "Smart Form") {
                    $('.smartform-type .component-content select option:first').html('Select Smart Form');
                    $('.smartform-type .component-content select').prop('selectedIndex', 0);
                } else {
                    $(".smartform-type #select-dyn-smart-form option:selected").text(fName);
                }
            },
            // This method will populate smart form on dynamic page
            clbkSelectDynamicSmartForm: function(response) {
                var formId = $("#select-dyn-smart-form option:selected").attr('value');
                formEid = formId;
                formName = $("#select-dyn-smart-form option:selected").html();
                var pageId = $("#hidden-page-id").val();
                $("#hidden-form-common-property-id").val(formId);

                var isSmartFormExist = $(".dyn-table.ui-sortable").find('.temp-component').hasClass("smart-form-component");

                //Check if smartForm already exist
                if (isSmartFormExist) {
                    removeExistingSmartForm();
                }
                $('.smartform-type select').attr('disabled', 'disabled');
                if (response && response.type !== "change") {
                    formId = response.id;
                    if (response.items) {
                        if (response.items.length > 1) {
                            // Associate smart form to page.
                            var data = {"type": 'form', "entityId": pageId, 'formId': formId};
                            var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'edit-page-contents', "data": data};
                            appGlobals.globals.ajaxCalling(obj, callbacks.clbkUpdateFormElememt);
                            self.resetColumn();
                        } else {
                            $("#common-error .modal-body b").html('This form only contains a "Form Submit" button. Please select another form containing additional form elements.');
                            $("#common-error-link").click();
                            $('.smartform-type select').removeAttr('disabled', 'disabled');
                            var fName = $('.fieldset span').text();
                            callbacks.clbkSmartFormNamePopulate(fName);
                            return false;
                        }
                    }
                } else if (formId) {
                    var smartFormInfoObject = {};
                    var generalSetupObject = {};

                    smartFormInfoObject.entityId = formId;
                    smartFormInfoObject.type = 'form';
                    generalSetupObject.type = "GET";
                    generalSetupObject.async = true;
                    generalSetupObject.dataType = 'json';
                    generalSetupObject.data = smartFormInfoObject;
                    generalSetupObject.url = appGlobals.globals.appbuilderURL + 'get-entity';
                    appGlobals.globals.ajaxCalling(generalSetupObject, callbacks.clbkSelectDynamicSmartForm);
                } else {
                    removeExistingSmartForm();
                    $(".smartform").parents('tr').remove();
                    $('.smartform-type .component-content select').prop('selectedIndex', 0);
                    isFormPresent = false;
                    $(".component-content .tabular-pane .smartform-content").show();
                    callbacks.clbkCloseDynamicEditFlyover();
                    self.resetColumn();
                }
            },
            // This method will take actions on edit flyover close
            clbkOnFlyoverClose: function() {
                if ($(".dyn-table-container .selected-table-row").length > 0) {
                    $(".dyn-table-container .selected-table-row").removeClass("selected-table-row");
                    $("#hidden-component-id").val('');
                    $("#hidden-component-type").val('');
                    $("#hidden-component-save-id").val('');
                    $("#hidden-form-common-property-id").val('');
                }
                $(".dyn-table-container .selected-table-column").removeClass('selected-table-column');
                $('.dyn-lable-cell:visible, .dyn-add-cell:visible, .dyn-lable-row:visible, .dyn-add-row:visible').hide();
            },
            // This function will hide delete model.
            clbkHideDeleteModel: function(data) {
                if (data.success) {
                    var pageId = data.data;
                    $("#" + pageId).remove();
                    $('#dynamic-content-setup').hide('slide', {direction: 'right'}, 500);
                    callbacks.clbkOnFlyoverClose();
                    $(".section-body").attr("data-page", 0);
                    pageDetailsInfo = '';
                    callbacks.clbkResetSearchPageList();
                }
            },
            // This method will delete single dynamic page
            clbkDeletePageOnDetails: function() {
                var pageId = $("#delete-page .hidden-confirm-id").val();
                formName = "Smart Form";
                if (pageId) {
                    $(".close-dyn-flyover").click();
                    $("#delete-page .btn-cancel").click();
                    $("#delete-page .close").click();
                    var data = {"type": 'page', "entityId": pageId};
                    var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'delete-entity', "data": data};

                    appGlobals.globals.ajaxCalling(obj, callbacks.clbkHideDeleteModel);
                }
            },
            // This method will call function to make dynamic page a home page
            clbkPrivateSinglePageEvent: function() {
                var pageId = $(this).closest("tr").attr('id');

                callbacks.clbkPrivatePage(pageId);
            },
            // This method will call function to make dynamic page a private page
            clbkPublicSinglePageEvent: function() {
                var pageId = $(this).closest("tr").attr('id');

                callbacks.clbkPublicPage(pageId);
            },
            // This function will generate page list markup
            clbkGeneratePageListMarkup: function(data) {
                self.generateHTML(data);
                self.previousRequestComplete = true;
            },
            // This function will refresh page list
            clbkUpdatePageList: function() {
                var appId = $("#application-name").attr("data-id");
                var venue = $("#venue-name").attr("value");
                var nextPage = $(".section-body #list-table").attr("data-page");
                var sort = $(".section-body #list-table").attr("data-sort");
                var data = {"appId": appId, "type": 'pages', "pageIndex": nextPage, "sort": sort};
                if (venue) {
                    data.venue = venue;
                }
                var obj = {"type": "GET", "async": true, "url": appGlobals.globals.appbuilderURL + 'get-app-templates', "data": data};
                appGlobals.globals.ajaxCalling(obj, callbacks.clbkGeneratePageListMarkup);
            },
            // This method will call make dynamic page a private page
            clbkPrivatePage: function(pageId) {
                var appId = $("#application-name").attr("data-id");
                var venueId = $("#venue-name").attr("value");
                var data = {"type": 'private', "entityId": pageId, "appId": appId, "venue": venueId};
                var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'edit-page-contents', "data": data};

                appGlobals.globals.ajaxCalling(obj, callbacks.clbkUpdatePageList);
                var listTableTd = $("#list-table tr#" + pageId + " td");
                listTableTd.find(".home-icon.retina-icon img").hide();
                $("#list-table tr td .private-icon.retina-icon .private-div").hide();
                listTableTd.find(".private-icon.retina-icon .private-div").show();
                listTableTd.find(".private-icon.retina-icon").show();
                listTableTd.find(".home-icon.retina-icon").hide();
                $("#list-table tr td .private").closest("li").remove();
                $("#list-table tr td .btn-group ul").append('<li><a data-toggle="modal" href="#" data-attr="false" class="private">Set As Private Home</a></li>');
                listTableTd.find(".btn-group ul li .private").closest("li").remove();
                listTableTd.find(".btn-group ul li .public").closest("li").remove();
            },
            // This method will call function to make dynamic page a home page
            clbkPublicPage: function(pageId) {
                var appId = $("#application-name").attr("data-id");
                var venueId = $("#venue-name").attr("value");
                var data = {"type": 'public', "entityId": pageId, "appId": appId, "venue": venueId};
                var obj = {"type": "POST", "async": true, "url": appGlobals.globals.appbuilderURL + 'edit-page-contents', "data": data};

                appGlobals.globals.ajaxCalling(obj, callbacks.clbkUpdatePageList);
                var listTableTd = $("#list-table tr#" + pageId + " td");
                $("#list-table tr td .home-icon.retina-icon img").hide();
                listTableTd.find(".private-icon.retina-icon .private-div").hide();
                listTableTd.find(".home-icon.retina-icon img").show();
                listTableTd.find(".private-icon.retina-icon").hide();
                listTableTd.find(".home-icon.retina-icon").show();
                $("#list-table tr td .public").closest("li").remove();
                $("#list-table tr td .btn-group ul").append('<li><a data-toggle="modal" href="#" data-attr="false" class="public">Set As Home</a></li>');
                listTableTd.find(".btn-group ul li .public").closest("li").remove();
                listTableTd.find(".btn-group ul li .private").closest("li").remove();
            },
            // This method will generate dynamic button list for dynamic content
            clbkGenerateDynamicButtonList: function(response) {
                var appId = $("#application-name").attr("data-id");

                if (response) {
                    appGlobals.globals.AppButtonType = response;
                    appGlobals.globals.isUpdateAppDynamicButtonList = 0;
                    appGlobals.globals.pubsubQueue.publish("generateButtonTypeDropDown");
                } else {
                    if (jQuery.isEmptyObject(appGlobals.globals.AppButtonType) || appGlobals.globals.isUpdateAppDynamicButtonList) {
                        var obj = {};
                        obj.type = "GET";
                        obj.async = true;
                        obj.url = appGlobals.globals.appbuilderURL + "get-app-templates";
                        obj.data = {"appId": appId, "type": "dynamic-buttons"};
                        appGlobals.globals.ajaxCalling(obj, callbacks.clbkGenerateDynamicButtonList);
                    } else {
                        appGlobals.globals.pubsubQueue.publish("generateButtonTypeDropDown");
                    }
                }
            },
            // This function will save page component.
            clbkSavePageComponent: function(response, maxCount) {
                var pageId = $("#hidden-page-id").val();
                var componentInitialId = $("#hidden-component-id").val();
                var componentType = $("#hidden-component-type").val();
                componentType = componentType.toLowerCase();
                var appId = $("#application-name").attr("data-id");

                // Note :: A Component ID is retrieved only if component is saved in page, else not
                var componentId = $("#hidden-component-save-id").val();
                var objData = $("#" + componentId).data("property");
                var result = validateComponent();
                if (!result) {
                    return false;
                }
                if (pageId) {
                    // Here page is already created
                    isOnlySavepage = 0;
                    if (response && response.type !== "click") {
                        // Find specific component and attach its ID
                        var element;
                        if (isSmartFormFlag) {
                            $(".body .dyn-table td .smartform > li:not(.ui-sortable-placeholder, .ui-sortable-helper)").each(function() {
                                var id = $(this).attr("id");
                                var obj = $(this).data("property");
                                if (!id && !obj) {
                                    element = $(this);
                                    return false;
                                }
                            });
                        } else {
                            element = $(".body .dyn-table td > li[data-ajax='" + maxCount + "']");
                        }
                        $(element).attr("id", response.id);
                        $("#" + response.id).data("property", response);
                        $(element).removeAttr("data-ajax");

                        self.updateAllComponentOrder();
                    } else {

                        if (componentType === "table") {
                            return false;
                        }

                        // No more components to save
                        if ($(".body .dyn-table td > li >").length === 0 &&
                                $(".body .dyn-table-container").length === 0) {
                            return;
                        }

                        var pageComponentInfoObject = {};
                        if (componentId) {
                            // Component already exists hence, will return object Data
                            objData = formComponentInfo(componentType, componentId, componentInitialId, objData);
                        } else {
                            // This method will form objct for making API call. Its a re-usable method
                            pageComponentInfoObject = formComponentInfo(componentType, componentId, componentInitialId, objData);
                        }

                        var generalSetupObject = {};
                        generalSetupObject.type = "POST";
                        generalSetupObject.async = true;
                        generalSetupObject.dataType = 'json';
                        if (maxCount) {
                            generalSetupObject.ajaxComponent = maxCount;
                        }
                        if (componentId) {
                            if (objData) {
                                isButtonTypePresent = true;
                                $('.button-type #select-button-type').css('border', '1px solid #ccc');
                                generalSetupObject.data = {"type": 'content', 'appId': appId, 'pageId': pageId, 'entityId': componentId, 'entityInfo': JSON.stringify(objData)};
                                generalSetupObject.url = appGlobals.globals.appbuilderURL + 'edit-page-contents';
                            } else {
                                $('.button-type #select-button-type').css('border', '2px solid #b3d4fc');
                                isButtonTypePresent = false;
                                $(".category-type").hide();
                                $(".category-name").hide();
                                $(".content-category-1").hide();
                                return false;
                            }
                        } else {
                            generalSetupObject.data = {"type": 'page-content', 'appId': appId, 'pageId': pageId, 'info': JSON.stringify(pageComponentInfoObject)};
                            generalSetupObject.url = appGlobals.globals.appbuilderURL + 'add-entity';
                        }
                        if (componentType === "smartform") {
                            return false;
                        } else {
                            appGlobals.globals.ajaxCalling(generalSetupObject, callbacks.clbkSavePageComponent);
                        }
                    }
                } else {
                    isOnlySavepage = 1;
                    $("#dynamic-container .section-content .form-action .save-page").click();
                }
            },
            // This method use for alignment button for components
            clbkAlignAddActiveClass: function() {
                if ($(this).parent().hasClass("left-align")) {
                    $(this).siblings().removeClass('active');
                    $(this).addClass('active');
                } else if ($(this).parent().hasClass("right-align")) {
                    $(this).siblings().removeClass('active');
                    $(this).addClass('active');
                }
            },
            // This function will update category box depending on the button selected.
            clbkUpdateCategory: function() {
                var type = $("#select-button-type").find(':selected').attr("type");
                $(".category-type").hide();
                $(".category-name, .category-name-1, .category-name-2").hide();
                $(".content-category-1, .content-category-2").hide();
                $("#map-dropdown").hide();
                $("#layer-dropdown").hide();
                $(".content-category-1").val('');
                $(".content-category-2").val('');
                $(".top-content-checkboxes").hide();
                $(".layer-select-option").hide();
                if (!$(".drop-down-wrapper").find(".drop-down-body").hasClass("hide")) {
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body").addClass("hide");
                }
                switch (type) {
                    case "1": // For dynamic Page
                        callbacks.clbkCommonPageList();
                        $(".category-name").html("Available Pages");
                        $(".category-type").show();
                        $(".category-name").show();
                        $(".content-category-1").attr("placeholder", "");
                        break;

                    case "62": // For Modal Web View
                        $(".category-name").html("Website URL");
                        $(".category-name").show();
                        $(".content-category-1").show();
                        $(".content-category-1").attr("placeholder", "e.g. http:www.phunware.com");
                        break;

                    case "84":
                        // For building map
                        $("#map-dropdown").show();
                        $(".category-name").html("Buildings To Display");
                        $(".category-name").show();
                        $("#map-dropdown .drop-down-header .total-selected span").html('');
                        $("#map-dropdown .drop-down-header.auto-complete").html('');
                        $("#map-dropdown .total-selected").css("display", "none");
                        $("#map-dropdown .drop-down-body-header a").html("Select All");
                        $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                        $("#map-dropdown .auto-complete").attr("placeholder", "Select one or more buildings");
                        $("#map-dropdown ul li input").prop("checked", false);
                        $("#map-dropdown .drop-down-body ul li").show();
                        $("#map-dropdown .drop-down-body ul li.no-match-found").hide();
                        break;

                    case "73":
                        var label = "All Layers";
                        $(".top-content-checkboxes").show();
                        $(".layer-select-option").show();
                        $("#layer-dropdown").show();
                        $(".category-name").html("Layers To Display");
                        $(".category-name").show();
                        $("#layer-dropdown .drop-down-header .total-selected span").html('');
                        $("#layer-dropdown .drop-down-header.auto-complete").html('');
                        $("#layer-dropdown .total-selected").css("display", "none");
                        $("#layer-dropdown .drop-down-body-header a").html("De-select All");
                        $("#layer-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                        $(".top-content-checkboxes label input").prop("checked", false);
                        $("#layer-dropdown ul li input").prop("checked", true);
                        $("#layer-dropdown .total-selected").css("display", "inline-block");
                        $("#layer-dropdown .total-selected span").html(label);
                        $("#layer-dropdown .drop-down-body ul li").show();
                        $("#layer-dropdown .drop-down-body ul li.no-match-found").hide();
                        $("#layer-dropdown .drop-down-header .first .auto-complete").attr("placeholder", "");
                        $("#layer-dropdown .drop-down-header").css('border', '1px solid #ccc');
                        break;

                    case "14": // For PDF Document
                        $(".category-name").html("PDF Document");
                        $(".category-name").show();
                        $(".content-category-1").show();
                        $(".content-category-1").attr("placeholder", "e.g. http:www.phunware.com");
                        break;

                    case "61": // For Send Email
                        $(".category-name").html("Send Email");
                        $(".category-name").show();
                        $(".content-category-1").show();
                        $(".content-category-1").attr("placeholder", "e.g. info@phunware.com");
                        break;

                    case "36": // For Directory
                        $(".category-name-1, .category-name-2").show();
                        $(".category-name .tooltip-container").show();
                        $(".content-category-1, .content-category-2").show();
                        $(".content-category-1").attr("placeholder", "Copy & paste from CME");
                        $(".content-category-2").attr("placeholder", "All Directory items shown if left blank");
                        var appVersion = $("#application-name .selected-name").attr("value");
                        if (appVersion <= 4.0) {
                            $(".category-name-1").hide();
                            $(".content-category-1").hide();
                        }

                        break;

                    case "56": // For Phone Number
                        $(".category-name").html("Phone Number");
                        $(".category-name").show();
                        $(".content-category-1").show();
                        $(".content-category-1").attr("placeholder", "e.g. 444-444-4444");
                        break;

                    default:
                        $(".category-name").html("Argument 1");
                        $(".category-name").show();
                        $(".content-category-1").show();
                        $(".content-category-1").attr("placeholder", "");
                        break;
                }
            },
            // This method will add look and feel for active row on mouseover
            clbkPageMouseover: function() {
                $(this).find('img:eq(2)').attr("src", constants.VERTICAL_ELLIPSES_HOVER);
            },
            // This method will remove look and feel for active row on mouseout
            clbkPageMouseout: function() {
                $(this).find('img:eq(2)').attr("src", constants.VERTICAL_ELLIPSES);
            },
            // This method contains pagination logic
            clbkPagination: function() {
                var appId = $("#application-name").attr("data-id");
                var venue = $("#venue-name").attr("value");
                var scrollTop = $(this).scrollTop();
                var innerHeight = $(this).innerHeight();
                var total = scrollTop + innerHeight;
                var scrollHeight = this.scrollHeight;
                if (total < scrollHeight) {
                    return false;
                }
                var pageObject = {};
                var searchBy = $.trim($("#home-page .search-form input").val());

                $(".table tbody td .open .dropdown-toggle").click();
                if (self.recordCount === 20 && self.previousRequestComplete === true) {
                    var nextPage = parseInt($(".list-table#list-table").attr("data-page"));
                    self.previousRequestComplete = false;
                    ++nextPage;
                    $(".list-table#list-table").attr("data-page", nextPage);
                    var sort = $(".list-table#list-table").attr("data-sort");

                    if (searchBy !== "") {
                        var venueId = $("#venue-name").attr("value");
                        var dynamicInfoObject = {};
                        dynamicInfoObject.type = "GET";
                        dynamicInfoObject.async = true;
                        dynamicInfoObject.dataType = 'json';
                        dynamicInfoObject.data = {"appId": appId, "searchText": searchBy, "pageIndex": nextPage, "sort": sort};
                        if (venueId) {
                            data.venue = venueId;
                        }
                        dynamicInfoObject.url = appGlobals.globals.appbuilderURL + 'search-pages';
                        appGlobals.globals.ajaxCalling(dynamicInfoObject, callbacks.clbkSearchEntity);
                        return false;
                    }
                    var data = {"appId": appId, "type": 'pages', "pageIndex": nextPage, "sort": sort};
                    if (venue) {
                        data.venue = venue;
                    }
                    pageObject.type = "GET";
                    pageObject.async = true;
                    pageObject.dataType = 'json';
                    pageObject.url = appGlobals.globals.appbuilderURL + 'get-app-templates';
                    pageObject.data = data;
                    appGlobals.globals.ajaxCalling(pageObject, callbacks.clbkGeneratePageListMarkup);
                }
            },
            // This method will identify navbar checkbox is check or nor.
            clbkSelectNavbar: function() {
                if ($(this).prop('checked') === true) {
                    $(".page-details .toolbar").removeAttr("disabled");
                } else {
                    $(".page-details .toolbar").attr("disabled", "disabled");
                    $(".page-details .toolbar").prop('checked', false);
                }
                $(".save-page").click();
            },
            // This method will identify tray checkbox is check or nor.
            clbkSelectTray: function() {
                if ($(this).prop('checked') === true) {
                    $(".page-details .tray").removeAttr("disabled");
                    $(".page-details .tray.lefttray").prop("checked", true);
                } else {
                    $(".page-details .tray").attr("disabled", "disabled");
                    $(".page-details .tray").prop('checked', false);
                }
                $(".save-page").click();
            },
            // This method will save tray menu.
            clbkSelectTrayOption: function() {
                $(".save-page").click();
            },
            //This method on focus out calls for flyover
            clbkSaveClick: function() {
                callbacks.clbkSavePageComponent();
            },
            //This method will check enter number is greater than 50
            clbkInputCheckFalse: function(promptComponent) {
                if (promptComponent.is(".paragraph-type *")) {
                    $(".padding-error").show();
                    $(".padding-error").css("color", "1px solid #e34948");
                } else if (promptComponent.is(".carousel-type *")) {
                    $(".insets-error").show();
                    $(".insets-error").css("color", "1px solid #e34948");
                } else if (promptComponent.is(".columns-type *")) {
                    $(".cell-padding-error").show();
                    $(".cell-padding-error").css("color", "1px solid #e34948");
                } else if (promptComponent.is(".rows-type *")) {
                    $(".row-padding-error").show();
                    $(".row-padding-error").css("color", "1px solid #e34948");
                } else {
                    $(".options-padding-error").show();
                    $(".options-padding-error").css("color", "1px solid #e34948");
                }
            },
            //This method will check enter number is integer or not
            clbkPromptUnexpectedValue: function() {
                var value = $.trim($(this).val());
                if (value <= 50 && value >= 0 && value) {
                    if ($(this).is(".paragraph-type *")) {
                        $(".padding-error").show();
                        $(".paragraph-type .padding-align input").css("border", "1px solid #ccc");
                        $(".padding-error").css("color", "1px solid #999999");
                    } else if ($(this).is(".carousel-type *")) {
                        $(".insets-error").show();
                        $(".carousel-type .inset input").css("border", "1px solid #ccc");
                        $(".insets-error").css("color", "1px solid #999999");
                    } else if ($(this).is(".columns-type *")) {
                        $(".cell-padding-error").show();
                        $(".columns-type .column-padding .numeric").css("border", "1px solid #ccc");
                        $(".cell-padding-error").css("color", "1px solid #999999");
                    } else if ($(this).is(".rows-type *")) {
                        $(".row-padding-error").show();
                        $(".rows-type .column-padding .numeric").css("border", "1px solid #ccc");
                        $(".row-padding-error").css("color", "1px solid #999999");
                    } else {
                        $(".options-padding-error").show();
                        $(".page-details .options-padding ul li input").css("border", "1px solid #ccc");
                        $(".options-padding-error").css("color", "1px solid #999999");
                    }
                    $(this).css("border", "1px solid #ccc");
                } else {
                    var promptComponent = $(this);
                    callbacks.clbkInputCheckFalse(promptComponent);
                    promptComponent.css("border", "1px solid #b3d4fc");
                    promptComponent.val('');
                    return false;
                }
            },
            //This method will show helper text of content padding and spacing textfield.
            clbkFocusIn: function() {
                if ($(this).is(".paragraph-type *")) {
                    $(".paragraph-type .padding-align input").css("border", "1px solid #ccc");
                    $(".padding-error").css("color", "1px solid #999999");
                    $(".padding-error").show();
                } else if ($(this).is(".carousel-type *")) {
                    $(".carousel-type .inset input").css("border", "1px solid #ccc");
                    $(".insets-error").css("color", "1px solid #999999");
                    $(".insets-error").show();
                } else if ($(this).is(".columns-type *")) {
                    $(".columns-type .column-padding .numeric").css("border", "1px solid #ccc");
                    $(".cell-padding-error").css("color", "1px solid #999999");
                    $(".cell-padding-error").show();
                } else if ($(this).is(".rows-type *")) {
                    $(".rows-type .row-padding .numeric").css("border", "1px solid #ccc");
                    $(".row-padding-error").css("color", "1px solid #999999");
                    $(".row-padding-error").show();
                } else {
                    $(".paragraph-type .padding-align input").css("border", "1px solid #ccc");
                    $(".options-padding-error").css("color", "1px solid #999999");
                    $(".options-padding-error").show();
                }

            },
            //This method will check enter number is integer or not
            clbkPromptIntegerValue: function() {
                var value = $.trim($(this).val());
                if (value && value >= 0) {
                    return 1;
                }
                $(this).val('');
                return false;
            },
            //This method shows auto scroll helper text
            clbkFocusInScroll: function() {
                $(".scroll-error").hide();
                $(".scroll-helper").show();
            },
            //This method hide auto scroll helper text and error text
            clbkFocusOutScroll: function() {
                $(".scroll-error").hide();
                $(".scroll-helper").hide();
            },
            //This method shows auto scroll error text
            clbkKeyScroll: function() {
                $(".scroll-helper").hide();
                var value = $.trim($(this).val());
                if (value <= 5 && value >= 0 && value) {
                    $(".scroll-error").hide();
                } else {
                    $(this).val('');
                    $(".scroll-error").show();
                }
            },
            // This method sorts pages in ascending and descending order.
            clbkSortPages: function() {
                var records = $(".section-body #list-table tr").length;
                var appId = $("#application-name").attr("data-id");
                var nextPage = 0;
                var sort = $(".section-body #list-table").attr("data-sort");
                var venue = $("#venue-name").attr("value");
                var searchBy = $.trim($("#home-page .search-form input").val());

                if (records <= 1) {
                    return false;
                }
                $(".table tbody td .open .dropdown-toggle").click();
                $("#home-page .list-table tbody").html('');
                if (sort === "1") {
                    $("#home-page .list-table tr th i").addClass("fa-caret-down").removeClass("fa-caret-up");
                    sort = 2;
                } else {
                    $("#home-page .list-table tr th i").addClass("fa-caret-up").removeClass("fa-caret-down");
                    sort = 1;
                }

                $(".section-body #list-table").attr("data-sort", sort);
                $(".section-body #list-table").attr("data-page", 0);
                if (searchBy !== "") {
                    var venueId = $("#venue-name").attr("value");
                    var dynamicInfoObject = {};
                    dynamicInfoObject.type = "GET";
                    dynamicInfoObject.async = true;
                    dynamicInfoObject.dataType = 'json';
                    dynamicInfoObject.data = {"appId": appId, "searchText": searchBy, "pageIndex": nextPage, "sort": sort};
                    if (venueId) {
                        data.venue = venueId;
                    }
                    dynamicInfoObject.url = appGlobals.globals.appbuilderURL + 'search-pages';
                    appGlobals.globals.ajaxCalling(dynamicInfoObject, callbacks.clbkSearchEntity);
                } else {
                    var data = {"appId": appId, "type": 'pages', "pageIndex": 0, "sort": sort};
                    if (venue) {
                        data.venue = venue;
                    }
                    var obj = {"type": "GET", "async": true, "url": appGlobals.globals.appbuilderURL + 'get-app-templates', "data": data};
                    appGlobals.globals.ajaxCalling(obj, callbacks.clbkGeneratePageListMarkup);
                }
            },
            // This function will refresh page list
            clbkResetSearchPageList: function() {
                $(".section-body #list-table").attr("data-sort", 1);
                $(".section-body #list-table").attr("data-page", 0);
                $("#home-page .list-table tr th i").addClass("fa-caret-up").removeClass("fa-caret-down");
                $("#search-btn").removeClass("icon-remove");
                $("#search-btn").addClass("icon-search");
                $(".dynamic-content .search-form .form-control").val('');
                callbacks.clbkUpdatePageList();
            },
            // This method will remove error class
            clbkClearError: function() {
                if ($(this).is(".columns-type *")) {
                    $(".cell-padding-error").hide();
                } else if ($(this).is(".rows-type *")) {
                    $(".row-padding-error").hide();
                }
            },
            // This method will remove all selected buildings.
            clbkRemoveTotalSelectedBuildings: function() {
                $(this).parent().find("span").html('');
                $("#map-dropdown .total-selected").css("display", "none");
                $("#map-dropdown .drop-down-body-header a").html("Select All");
                $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                $("#map-dropdown .auto-complete").attr("placeholder", "Select one or more buildings");
                $("#map-dropdown ul li input").prop("checked", false);
                callbacks.clbkSaveClick();
            },
            // This method will select input buildings.
            clbkBuildingInputCheckTrue: function() {
                $("#map-dropdown .drop-down-body ul li").each(function() {
                    if ($(this).css('display') === 'list-item') {
                        $(this).find("input").prop("checked", true);
                    }
                });
            },
            // This method will deselect input buildings.
            clbkBuildingInputCheckFalse: function() {
                $("#map-dropdown .drop-down-body ul li").each(function() {
                    if ($(this).css('display') === 'list-item') {
                        $(this).find("input").prop("checked", false);
                    }
                });
            },
            // This method will select/deselect buildings.
            clbkSelectDeselectBuildings: function() {
                var type = $(this).attr("data-type");
                var length = $("#map-dropdown .drop-down-body ul li input").length;
                var count = 0;

                if (!length) {
                    return false;
                }
                if (type === "select") {
                    callbacks.clbkBuildingInputCheckTrue();
                    count = $("#map-dropdown .drop-down-body ul li [type='checkbox']:checked").length;
                    if (count === length) {
                        $("#map-dropdown .total-selected span").html("All Buildings");
                    } else {
                        var label = count + " Buildings Selected";
                        if (count === 1) {
                            label = count + " Building Selected";
                        }
                        $("#map-dropdown .total-selected span").html(label);
                    }
                    $("#map-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#map-dropdown .drop-down-body-header a").html("De-select All");
                    $("#map-dropdown .total-selected").css("display", "inline-block");
                    $("#map-dropdown .auto-complete").attr("placeholder", "");
                } else {
                    callbacks.clbkBuildingInputCheckFalse();
                    count = $("#map-dropdown .drop-down-body ul li [type='checkbox']:checked").length;
                    if (count) {
                        var label = count + " Buildings Selected";
                        if (count === 1) {
                            label = count + " Building Selected";
                        }
                        $("#map-dropdown .total-selected span").html(label);
                    } else {
                        $("#map-dropdown .total-selected span").html("");
                        $("#map-dropdown .total-selected").css("display", "none");
                        $("#map-dropdown .auto-complete").attr("placeholder", "Select one or more buildings");
                    }
                    $("#map-dropdown .drop-down-body").addClass("hide");
                    $("#map-dropdown .drop-down-header .auto-complete").html('');
                    $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                    $("#map-dropdown .drop-down-body-header a").html("Select All");
                }
                $("#map-dropdown .drop-down-body ul li.no-match-found").hide();
                callbacks.clbkSaveClick();
            },
            // This method will select/deselect buildings.
            clbkSelectBuildings: function() {
                $(".drop-down-body").removeClass("hide");
                var total = 0;
                $("#map-dropdown .drop-down-body ul li").each(function() {
                    if ($(this).css('display') === 'list-item') {
                        total++;
                    }
                });
                var input = $('#map-dropdown .drop-down-body ul li input').length;
                var checked = $('#map-dropdown .drop-down-body ul li input:checkbox:checked').length;
                var label = "";

                $("#map-dropdown .auto-complete").attr("placeholder", "");
                if (input === checked) {
                    label = "All Buildings";
                    $("#map-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#map-dropdown .drop-down-body-header a").html("De-select All");
                    $("#map-dropdown .total-selected").css("display", "inline-block");
                } else if (checked === total) {
                    label = checked + " Buildings Selected";
                    if (checked === 1) {
                        label = checked + " Building Selected";
                    }
                    $("#map-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#map-dropdown .drop-down-body-header a").html("De-select All");
                    $("#map-dropdown .total-selected").css("display", "inline-block");
                }
                else if (checked) {
                    label = checked + " Buildings Selected";
                    if (checked === 1) {
                        label = checked + " Building Selected";
                    }
                    $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                    $("#map-dropdown .drop-down-body-header a").html("Select All");
                    $("#map-dropdown .total-selected").css("display", "inline-block");
                } else {
                    $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                    $("#map-dropdown .drop-down-body-header a").html("Select All");
                    $("#map-dropdown .auto-complete").attr("placeholder", "Select one or more buildings");
                    $("#map-dropdown .total-selected").css("display", "none");
                }
                $("#map-dropdown .total-selected span").html(label);
            },
            // This method will search keyword related buildings.
            clbkSearchBuildings: function() {
                var value = $.trim($(this).text()).toLowerCase();
                var count = 0;
                var showcount = 0;

                $("#map-dropdown .drop-down-body-header a").attr("data-type", "select");
                $("#map-dropdown .drop-down-body-header a").html("Select All");
                $("#map-dropdown .drop-down-body-header").show();
                $("#map-dropdown .drop-down-body ul li").hide();
                $("#map-dropdown .drop-down-body ul li.no-match-found").hide();
                $("#map-dropdown .drop-down-body ul li:not(.no-match-found)").each(function() {
                    var name = $(this).find("label a").attr("title");
                    if (name.toLowerCase().indexOf(value) >= 0) {
                        $(this).show();
                        count++;
                        if ($(this).find("input").prop("checked")) {
                            showcount++;
                        }
                    }
                });
                if (!count) {
                    $("#map-dropdown .drop-down-body ul li").hide();
                    $("#map-dropdown .drop-down-body ul li.no-match-found").show();
                    $("#map-dropdown .drop-down-body-header").hide();
                }
                if (!value) {
                    $("#map-dropdown .drop-down-body ul li").show();
                    $("#map-dropdown .drop-down-body ul li.no-match-found").hide();
                    if (!count) {
                        $("#map-dropdown .auto-complete").attr("placeholder", "Select one or more buildings");
                    }
                }
                $(".drop-down-wrapper").find(".drop-down-body").removeClass("hide");
                if (count === showcount) {
                    $("#map-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#map-dropdown .drop-down-body-header a").html("De-select All");
                }
            },
            //This method will restricted enter key.
            clbkRestrictedEnterKey: function(e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            },
            //This function will toggle map dropdown.
            toggleMapDropdown: function() {
                if ($(this).closest(".drop-down-wrapper").find(".drop-down-body").hasClass("hide")) {
                    var total = $(this).closest(".drop-down-wrapper").find('.drop-down-body ul li input').length;
                    var checked = $(this).closest(".drop-down-wrapper").find('.drop-down-body ul li input:checkbox:checked').length;

                    $(this).closest(".drop-down-wrapper").find(".drop-down-body ul li").show();
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body ul li.no-match-found").hide();
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body").removeClass("hide");
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body-header a").attr("data-type", "select");
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body-header a").html("Select All");
                    if (total === checked) {
                        $(this).closest(".drop-down-wrapper").find(".drop-down-body-header a").attr("data-type", "deselect");
                        $(this).closest(".drop-down-wrapper").find(".drop-down-body-header a").html("De-select All");
                    }
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body-header").show();
                } else {
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body").addClass("hide");
                    $(this).closest(".drop-down-wrapper").find(".drop-down-header .auto-complete").html('');
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body ul li").hide();
                    $(this).closest(".drop-down-wrapper").find(".drop-down-body ul li:not(.no-match-found)").show();

                    var componentType = $("#hidden-component-type").val();
                    var type = $("#select-button-type").find(':selected').attr("type");
                    if (type === "73" && componentType === "button") {
                        var checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;
                        if (!checked) {
                            $("#layer-dropdown ul li input").click();
                        }
                    }
                }
            },
            // This method will hide dropdown when click outside the dropdown
            clickOutSideDropdown: function(event) {
                if ($(event.target).parents('.drop-down-wrapper').length === 0) {
                    $(".drop-down-body").addClass("hide");
                    $(".drop-down-wrapper .drop-down-header .auto-complete").html('');
                    $(".drop-down-wrapper .drop-down-body ul li").hide();
                    $(".drop-down-wrapper .drop-down-body ul li:not(.no-match-found)").show();
                    var componentType = $("#hidden-component-type").val();
                    var type = $("#select-button-type").find(':selected').attr("type");
                    if (type === "73" && componentType === "button") {
                        var checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;
                        if (!checked) {
                            $("#layer-dropdown .drop-down-header").css('border', '2px solid #b3d4fc');
                        }
                    }
                }
            },
            //This method will remove placeholder when focus in on dropdown.
            clickFocusInDropdown: function() {
                $(this).attr("placeholder", "");
            },
            // This method will add placeholder when focus out from map dropdown
            clickFocusOutForMapDropdown: function() {
                var checked = $('#map-dropdown .drop-down-body ul li input:checkbox:checked').length;

                if (!checked) {
                    $(this).attr("placeholder", "Select one or more buildings");
                }
            },
            // This method will add placeholder when focus out from map dropdown
            clickFocusOutForLayerDropdown: function() {
                var checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;

                if (!checked) {
                    $(this).attr("placeholder", "Select one or more layers");
                }
            },
            // This method will remove all selected buildings.
            clbkRemoveTotalSelectedLayers: function() {
                $(this).parent().find("span").html('');
                $("#layer-dropdown .total-selected").css("display", "none");
                $("#layer-dropdown .drop-down-body-header a").html("Select All");
                $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                $("#layer-dropdown .auto-complete").attr("placeholder", "Select one or more layers");
                $("#layer-dropdown ul li input").prop("checked", false);
                callbacks.clbkSaveClick();
            },
            // This method will select/deselect buildings.
            clbkSelectDeselectLayers: function() {
                var type = $(this).attr("data-type");
                var length = $("#layer-dropdown .drop-down-body ul li input").length;
                $("#layer-dropdown .drop-down-header").css('border', '1px solid #ccc');
                var count = 0;

                if (!length) {
                    return false;
                }
                if (type === "select") {
                    $("#layer-dropdown .drop-down-body ul li").each(function() {
                        if ($(this).css('display') === 'list-item') {
                            $(this).find("input").prop("checked", true);
                        }
                    });
                    count = $("#layer-dropdown .drop-down-body ul li [type='checkbox']:checked").length;
                    if (count === length) {
                        $("#layer-dropdown .total-selected span").html("All Layers");
                    } else {
                        var label = count + " Layers Selected";
                        if (count === 1) {
                            label = count + " Layer Selected";
                        }
                        $("#layer-dropdown .total-selected span").html(label);
                    }
                    $("#layer-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#layer-dropdown .drop-down-body-header a").html("De-select All");
                    $("#layer-dropdown .total-selected").css("display", "inline-block");
                    $("#layer-dropdown .auto-complete").attr("placeholder", "");
                } else {
                    $("#layer-dropdown .drop-down-body ul li").each(function(index) {
                        if ($(this).css('display') === 'list-item') {
                            $(this).find("input").prop("checked", false);
                        }
                    });
                    count = $("#layer-dropdown .drop-down-body ul li [type='checkbox']:checked").length;
                    if (count) {
                        var label = count + " Layers Selected";
                        if (count === 1) {
                            label = count + " Layer Selected";
                        }
                        $("#layer-dropdown .total-selected span").html(label);
                    } else {
                        $("#layer-dropdown .total-selected span").html("");
                        $("#layer-dropdown .total-selected").css("display", "none");
                        $("#layer-dropdown .auto-complete").attr("placeholder", "Select one or more layers");
                    }
                    $("#layer-dropdown .drop-down-body").addClass("hide");
                    $("#layer-dropdown .drop-down-header .auto-complete").html('');
                    $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                    $("#layer-dropdown .drop-down-body-header a").html("Select All");
                }
                $("#layer-dropdown .drop-down-body ul li.no-match-found").hide();
                if (count > 1) {
                    callbacks.clbkSaveClick();
                }
            },
            // This method will select/deselect buildings.
            clbkSelectLayers: function() {
                var total = 0;
                $("#layer-dropdown .drop-down-header").css('border', '1px solid #ccc');
                $("#layer-dropdown .drop-down-body ul li").each(function() {
                    if ($(this).css('display') === 'list-item') {
                        total++;
                    }
                });
                var input = $('#layer-dropdown .drop-down-body ul li input').length;
                var checked = $('#layer-dropdown .drop-down-body ul li input:checkbox:checked').length;
                var label = "";

                $("#layer-dropdown .auto-complete").attr("placeholder", "");
                if (input === checked) {
                    label = "All Layers";
                    $("#layer-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#layer-dropdown .drop-down-body-header a").html("De-select All");
                    $("#layer-dropdown .total-selected").css("display", "inline-block");
                    $("#layer-dropdown .drop-down-header .first .auto-complete").attr("placeholder", "");
                } else if (checked === total) {
                    label = checked + " Layers Selected";
                    if (checked === 1) {
                        label = checked + " Layer Selected";
                    }
                    $("#layer-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#layer-dropdown .drop-down-body-header a").html("De-select All");
                    $("#layer-dropdown .total-selected").css("display", "inline-block");
                }
                else if (checked) {
                    label = checked + " Layers Selected";
                    if (checked === 1) {
                        label = checked + " Layer Selected";
                    }
                    $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                    $("#layer-dropdown .drop-down-body-header a").html("Select All");
                    $("#layer-dropdown .total-selected").css("display", "inline-block");
                } else {
                    $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                    $("#layer-dropdown .drop-down-body-header a").html("Select All");
                    $("#layer-dropdown .auto-complete").attr("placeholder", "Select one or more layers");
                    $("#layer-dropdown .total-selected").css("display", "none");
                }
                $("#layer-dropdown .total-selected span").html(label);
            },
            // This method will search keyword related buildings.
            clbkSearchLayers: function() {
                var value = $.trim($(this).text()).toLowerCase();
                var count = 0;
                var showcount = 0;

                $("#layer-dropdown .drop-down-body-header a").attr("data-type", "select");
                $("#layer-dropdown .drop-down-body-header a").html("Select All");
                $("#layer-dropdown .drop-down-body-header").show();
                $("#layer-dropdown .drop-down-body ul li").hide();
                $("#layer-dropdown .drop-down-body ul li.no-match-found").hide();
                $("#layer-dropdown .drop-down-body ul li:not(.no-match-found)").each(function() {
                    var name = $(this).find("label a").attr("title");
                    if (name.toLowerCase().indexOf(value) >= 0) {
                        $(this).show();
                        count++;
                        if ($(this).find("input").prop("checked")) {
                            showcount++;
                        }
                    }
                });
                if (!count) {
                    $("#layer-dropdown .drop-down-body ul li").hide();
                    $("#layer-dropdown .drop-down-body ul li.no-match-found").show();
                    $("#layer-dropdown .drop-down-body-header").hide();
                }
                if (!value) {
                    $("#layer-dropdown .drop-down-body ul li").show();
                    $("#layer-dropdown .drop-down-body ul li.no-match-found").hide();
                    if (!count) {
                        $("#layer-dropdown .auto-complete").attr("placeholder", "Select one or more layers");
                    }
                }
                $(".drop-down-wrapper").find(".drop-down-body").removeClass("hide");
                if (count === showcount) {
                    $("#layer-dropdown .drop-down-body-header a").attr("data-type", "deselect");
                    $("#layer-dropdown .drop-down-body-header a").html("De-select All");
                }
            }
        };

        // This method will call clbkSavePageComponent method using pub-sub concept
        this.savePageComponent = function(data) {
            if (data) {
                callbacks.clbkSavePageComponent(data.arg1, data.arg2);
            } else {
                callbacks.clbkSavePageComponent();
            }
        };

        // This method will set isSmartFormFlag flag
        this.setSmartForm = function(value) {
            isSmartFormFlag = value;
        };

        // Thsi method will set setSmartFormValue flag
        this.setSmartFormValue = function(value) {
            isFormPresent = value;
        };

        this.callUpdatePageList = function() {
            callbacks.clbkUpdatePageList();
        };

        // This method will retrieve image details
        var getImageData = function() {
            var obj = {};
            var data = {"sort": 1};

            obj.type = "GET";
            obj.async = true;
            obj.data = data;
            obj.url = appGlobals.globals.assetURL + "get-root-structure";
            appGlobals.globals.ajaxCalling(obj, callbacks.clbkGetFolderImageData);
        };

        // This method will bind callbacks to events
        var registerEvents = function() {
            $('.main-list-table, .content-list-table').on('mouseover', 'tbody tr', callbacks.clbkPageMouseover);
            $('.main-list-table, .content-list-table').on('mouseout', 'tbody tr', callbacks.clbkPageMouseout);
            $(".app-list").on("click", "li", callbacks.clbkAppChange);
            $('#general-to-home').click(callbacks.clbkPageList);
            $(".venue-dd .dropdown-venue-select").on("click", "li", callbacks.clbkVenueChange);
            $('#new-page').click(callbacks.clbkNewDynamicSetupPage);
            $('#list-table').on('click', 'tr td:nth-child(1):not(.no-records)', callbacks.clbkShowDynamicSetup);
            $('#details-to-home').click(callbacks.clbkHideDynamicSetup);
            $('.save-page').click(callbacks.clbkSaveDynamicSetupPage);
            $("#layout .body").on("click", "td .icon-remove-circle", callbacks.clbkRemoveComponent);
            $('#reset-table #reset-table-confirm').click(callbacks.clbkRemoveComponent);
            $('.open-dyn-flyover, .dynamic-form-view .footer').click(callbacks.clbkOpenDynamicFlyover);
            $('.dyn-flyover #arrow-edit').click(callbacks.clbkCloseDynamicEditFlyover);
            $(".dynamic-form-view .body").on("click", ".dyn-table .dyn-component, .dyn-table .form-element, .dyn-table-container .dyn-component", callbacks.clbkDynFlyover);
            $("#column-count").change(callbacks.clbkColumnChange);
            $("#page-name-text-box").on("change", callbacks.clbkCheckDuplicatePageName);
            $(".page-details .top-padding-val, .left-padding-val, .page-details .right-padding-val, .page-details .bottom-padding-val, .page-details .content-spacing-val").on("focusout", callbacks.clbkSavePageDetails);
            $(".page-details .page-bg-color").on("change", callbacks.clbkSaveDynamicSetupPage);
            $("#page-category-text-box").on("focusout", callbacks.clbkSavePageCategory);
            $("#layout .body").on("mouseout", "td .dyn-component, .smart-form-component .form-element", callbacks.clbkOnComponentMouseout);
            $('.search-form').on('keyup', 'input.form-control', callbacks.clbkSearchEntity);
            $('.search-form').on('click', '#search-btn.icon-search', callbacks.clbkSearchEntity);
            $('.search-form').on('click', '#search-btn.icon-remove', callbacks.clbkResetSearchPageList);
            $("#layout .right-menu .edit-component, .edit-component-type .edit-component").click(callbacks.clbkDynFlyover);
            $("#layout .body").on("click", ".dyn-table-layout td:not(.empty-container) .dyn-component", callbacks.clbkEditComponentType);
            $('#select-dyn-smart-form').change(callbacks.clbkSelectDynamicSmartFormBase);
            $("#dynamic-setup-edit-flyover .close-dyn-flyover").click(callbacks.clbkOnFlyoverClose);
            $('.table').on('click', '.folder-info .content span[class^="folder-"]', folderLogoClick);
            $('.page-details .preview-bg-image .bg-remove-img').on('click', removeBackgroundComponentImage);
            $('#list-table').on('click', 'tr td .open ul li .private', callbacks.clbkPrivateSinglePageEvent);
            $('#list-table').on('click', 'tr td .open ul li .public', callbacks.clbkPublicSinglePageEvent);
            $('.edit-para-save, .edit-phone-save, .edit-btn-save, .edit-img-save, .edit-carousel-save, .edit-smartform-save, .edit-form-component-save, .edit-content').click(callbacks.clbkSavePageComponent);
            $('.dyn-flyover-right .button-type, .dyn-flyover-right .paragraph-type, .dyn-flyover-right .phonenumber-type, .dyn-flyover-right .image-type, .dyn-flyover-right .carousel-type, .dyn-flyover-right .smartform-type, .dyn-flyover-right .form-element-type, .dyn-flyover-right .contents').on('focusout', '.component-name, .content-category-1, input[type=text], textarea, .component-para', callbacks.clbkSaveClick);
            $('.dyn-flyover-right .button-type, .dyn-flyover-right .paragraph-type, .dyn-flyover-right .phonenumber-type, .dyn-flyover-right .image-type, .dyn-flyover-right .carousel-type, .dyn-flyover-right .smartform-type, .dyn-flyover-right .form-element-type, .dyn-flyover-right .contents').on('focusout', 'input[type=text]', callbacks.clbkSaveClick);
            $('.dyn-flyover-right .button-type, .dyn-flyover-right .paragraph-type, .dyn-flyover-right .phonenumber-type, .dyn-flyover-right .image-type, .dyn-flyover-right .carousel-type, .dyn-flyover-right .smartform-type, .dyn-flyover-right .form-element-type, .dyn-flyover-right .contents').on('change', 'select, input[type=checkbox], input[type=radio]', callbacks.clbkSaveClick);
            $('.dyn-flyover-right .button-type, .dyn-flyover-right .paragraph-type, .dyn-flyover-right .image-type, .dyn-flyover-right .carousel-type, .dyn-flyover-right .smartform-type, .dyn-flyover-right .form-element-type, .dyn-flyover-right .contents').on('click', '.dropdown-menu li, .align-style .btn', callbacks.clbkSaveClick);
            $('.dyn-flyover-right .button-type .colorpicker-component, .dyn-flyover-right .paragraph-type .colorpicker-component, .dyn-flyover-right .phonenumber-type .colorpicker-component, .dyn-flyover-right .form-element-type .colorpicker-component').colorpicker().on('hidePicker.colorpicker', callbacks.clbkSaveClick);
            $('.dyn-flyover-right .align-style .btn').click(callbacks.clbkAlignAddActiveClass);
            $("#select-button-type").change(callbacks.clbkUpdateCategory);
            $('.colorpicker-component').colorpicker();
            $('#home-page .section-body').on('scroll', callbacks.clbkPagination);
            $('.page-details .navbar').click('change', callbacks.clbkSelectNavbar);
            $('.page-details .toolbar').click('click', callbacks.clbkSelectTrayOption);
            $('.page-details .select-tray').click('change', callbacks.clbkSelectTray);
            $('.page-details .tray').click('change', callbacks.clbkSelectTrayOption);
            $('.page-details .colorpicker-component').colorpicker().on('hidePicker.colorpicker', callbacks.clbkSaveDynamicSetupPage);
            $('.options-padding ul li input, .carousel-type .inset input, .paragraph-type .padding-align input, .columns-type .column-padding .numeric, .rows-type .row-padding .numeric').on('keyup', callbacks.clbkPromptUnexpectedValue);
            $('.carousel-type .width input, .carousel-type .height input, .phonenumber-type .phone-number').on('keyup', callbacks.clbkPromptIntegerValue);
            $('.carousel-type .time-period input').on('focusin', callbacks.clbkFocusInScroll);
            $('.carousel-type .time-period input').on('focusout', callbacks.clbkFocusOutScroll);
            $('.carousel-type .time-period input').on('keyup', callbacks.clbkKeyScroll);
            $('.options-padding ul li input, .carousel-type .inset input, .paragraph-type .padding-align input, .columns-type .column-padding .numeric, .rows-type .row-padding .numeric').on('focusin', callbacks.clbkFocusIn);
            $('.columns-type .column-padding .numeric, .rows-type .row-padding .numeric').on('focusout', callbacks.clbkClearError);
            $(".main-list-table").on("click", ".name-sort span, .name-sort i", callbacks.clbkSortPages);
            $("#layout .layout-nav").on("click", ".selected-layout", callbacks.clbkDynFlyover);
            $('#delete-page #delete-confirm').click(callbacks.clbkDeletePageOnDetails);
            $("#map-dropdown .total-selected").on("click", ".close", callbacks.clbkRemoveTotalSelectedBuildings);
            $("#map-dropdown .drop-down-body-header a").on("click", callbacks.clbkSelectDeselectBuildings);
            $("#map-dropdown .drop-down-body ul").on("change", "li input", callbacks.clbkSelectBuildings);
            $("#map-dropdown .drop-down-header .auto-complete").on("keyup", callbacks.clbkSearchBuildings);
            $("#map-dropdown .drop-down-header .auto-complete").on("keydown", callbacks.clbkRestrictedEnterKey);
            $("#map-dropdown .drop-down-header .auto-complete").on("focusout", callbacks.clickFocusOutForMapDropdown);
            $("#layer-dropdown .total-selected").on("click", ".close", callbacks.clbkRemoveTotalSelectedLayers);
            $("#layer-dropdown .drop-down-body-header a").on("click", callbacks.clbkSelectDeselectLayers);
            $("#layer-dropdown .drop-down-body ul").on("change", "li input", callbacks.clbkSelectLayers);
            $("#layer-dropdown .drop-down-header .auto-complete").on("keyup", callbacks.clbkSearchLayers);
            $("#layer-dropdown .drop-down-header .auto-complete").on("keydown", callbacks.clbkRestrictedEnterKey);
            $("#layer-dropdown .drop-down-header .auto-complete").on("focusout", callbacks.clickFocusOutForLayerDropdown);
            $(".drop-down-wrapper .drop-down-header .auto-complete").on("focusin", callbacks.clickFocusInDropdown);
            $(".drop-down-wrapper .caret-link").on("click", callbacks.toggleMapDropdown);
            $("body").on("click", callbacks.clickOutSideDropdown);
        };

        // This is a startup method for generating structure
        this.init = function() {
            registerEvents();
            resizeFlyover();

            var obj = {};
            obj.type = "GET";
            obj.async = true;
            obj.url = appGlobals.globals.publishingURL + "get-applications";
            appGlobals.globals.ajaxCalling(obj, appList);
        };
    };

    return DynamicContent;
});